[
  {
    "objectID": "index.html#import-and-project-design",
    "href": "index.html#import-and-project-design",
    "title": "Case study: Bike-sharing program in the chicago area",
    "section": "Import and Project Design",
    "text": "Import and Project Design\nData source for this data analysis, “Divvy Data” (n.d.).\nThinking ahead with reproducibility in mind, (importOrConnect?) should cover most use cases for tinkering and testing. I have found it helpful to reduce the need to re-download files and re-process all over again if all one needs to do is reconnect to the database that has already been written.\nAs a counterpart to the if-else design decision at the top of the project, I’ve condensed the initial download, import and cleaning steps inside of an R-script, (importProcessScript?)\nChoosing a persistent DuckDB database filesystem (as opposed to in-memory) was intentional as I wouldn’t lose the progress I’ve made when tinkering over multiple days. It seems just as fast as the in-memory database but also seems to reduce RAM needed in tinkering. (“Why DuckDB,” n.d.)"
  }
]