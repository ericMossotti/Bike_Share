---
title: "BikeShare"
author: "Eric Mossotti"

bibliography: citations/bikeShare/references.bib

repo: https://github.com/ericMossotti/ericMossotti.github.io/blob/main/bikeShare.qmd

source: repo

code-links:
    - text: Project Code
      href: bikeShare.qmd
      
code-fold: true
code-copy: hover
code-overflow: wrap
code-tools: true

toc: true
toc_float: false
smooth-scroll: true

echo: false
warning: false

df_print: paged

#font: merriweather, futura
---

# Case Study: Bike-Sharing, Rethought

[@divvyme]

|                    |       Single Ride       |           Day Pass            |            Divvy             |          Lyft Pink           |
|--------------------|:-----------------------:|:-----------------------------:|:----------------------------:|:----------------------------:|
|                    |    \$1 + \$0.18/min     |          \$18.10/day          |        \$143.90/year         |          \$199/year          |
| Classic bike       | \$1 unlock + \$0.18/min | 3 hours free, then \$0.18/min | 45 min free, then \$0.18/min | 45 min free, then \$0.18/min |
| Scooter            | \$1 unlock + \$0.44/min |   Free unlocks + \$0.44/min   |  Free unlocks + \$0.29/min   |  Free unlocks + \$0.29/min   |
| Ebike              | \$1 unlock + \$0.44/min |   Free unlocks + \$0.44/min   |  Free unlocks + \$0.18/min   |  Free unlocks + \$0.18/min   |
| Bike Angels        |                         |                               |              y               |              y               |
| Rideshare Benefits |                         |                               |                              |              y               |

: Compare options

#### References:

-   [Bike-share research (bikeshare-research.org)](https://bikeshare-research.org/#bssid:chicago)

-   [Divvy - Wikipedia](https://en.wikipedia.org/wiki/Divvy)

-   [Cycling in Chicago - Wikipedia](https://en.wikipedia.org/wiki/Cycling_in_Chicago)

-   [Home \| Divvy Bikes](https://divvybikes.com/)

-   [Divvy Membership & Pass Options \| Divvy Bikes](https://divvybikes.com/pricing)

-   [@datalic]

    -   [Data License Agreement \| Divvy Bikes](https://divvybikes.com/data-license-agreement)

-   [@motivate]

    -   [MOTIVATE (motivateco.com)](https://motivateco.com/)

-   [@indexof]

    -   [Index of bucket "divvy-tripdata"](https://divvy-tripdata.s3.amazonaws.com/index.html)

-   [@whyduck]

    -   [Why DuckDB?](https://duckdb.org/why_duckdb)

-   [@rforda]

    -   [R for Data Science: Chapter 22: Arrow](https://r4ds.hadley.nz/arrow "Arrow")

-   [@great-ci]

    -   <https://en.wikipedia.org/wiki/Great-circle_distance>

-   [@average2024]

    -   <https://bikingultimate.com/average-bicycle-speed-how-fast-do-cyclists-ride-and-what-affects-their-pace/>

```{r, include = FALSE}

knitr::opts_chunk$set(message = FALSE, 
                      warning = FALSE)
```

```{r}
#|label: 'create lists, download zips'

durls <-
    sprintf("https://divvy-tripdata.s3.amazonaws.com/%d-divvy-tripdata.zip",
            202301:202312)

# Need some directories to store the files. 
dir.create("tempZips")

tempZipPaths <- sprintf("tempZips/%d-divvy-tripdata.zip",
                     202301:202312)

# A simple way to download and relocate several files. 
curl::multi_download(durls,
                     destfiles = tempZipPaths)
```

```{r}
#|label: 'dir + lists for unz function'

# create tempFile directory
dir.create("tempFiles")

# create list of tempFile directory paths
tempfile_paths <- sprintf("tempFiles/%d-divvy-tripdata.csv",
                      202301:202312)

# create CSV file relocation directory
dir.create("tripdata")

# create CSV file relocation paths
fileList <- sprintf("tripdata/%d-divvy-tripdata.csv",
                       202301:202312)

# create CSV list to specify for unzipping
fileNames <- sprintf("%d-divvy-tripdata.csv",
                      202301:202312)
```

```{r}
#|label: 'view the new directory-file lists'

# review address info that was just created
tibble::tibble("URLs" = durls,
               "Zip File Paths" = tempZipPaths,
               "File Names" = fileNames,
               "Parquet File Paths" = tempfile_paths)
```

```{r}
#|label: 'unzip and relocate function'

# A custom function that makes unzipping, converting and relocating files all at once, simple. 
unz_relocate <- function (x = tempfile_paths,
                          y = tempZipPaths,
                          z = fileNames) {
    for (i in seq(x)) {
        utils::unzip(y[i],
                     z[i])
        file.rename(z[i],
                    x[i])
    }
}

unz_relocate()
```

```{r}
#|label: 'remove zips folder from working directory'

# To remove stored files
unlink("tempZips",
       recursive = TRUE)
```

```{r}
#|label: 'create tibble from temp CSV'

tripTibble <- purrr::map(tempfile_paths[1:12],
                         arrow::read_csv_arrow) |>
    purrr::list_rbind()
```

```{r}
#|label: 'count raw obs, then drop NAs'

original_nobs <- nrow(tripTibble)

tripTibble <- tripTibble |>
    tidyr::drop_na()
```

```{r}
#|label: 'new calculated column for trip time'

# to make use of supplied trip interval data
tripTibble |>
    dplyr::mutate("trip_time" = lubridate::time_length(
        lubridate::interval(started_at,
                            ended_at),
        unit = "minute"), 
        .keep = "all"
    ) |>
    arrow::write_dataset("tempFiles",
                         existing_data_behavior = "delete")
```

```{r}
#|label: 'removing large tibble from memory'

rm(tripTibble)
```

```{r}
#|label: 'create and view list of files'

fileList <- list.files(path = "tempFiles",
                              full.names = TRUE,
                              recursive = TRUE)

cat("Files now in tempFiles: ",
    "\n\n",
    fileList)
```

```{r}
#|label: 'create/write a parquet file dataset'

tripset <- arrow::open_dataset(sources = fileList[1],
                               format = "parquet")

tripset |> arrow::write_dataset(path = "tripdata",
                                format = "parquet")
```

```{r}
#|label: 'view arrow dataset content'

tripset |>
    dplyr::collect()
```

```{r}
#|label: 'delete CSV directory'

# all files and folders
unlink("tempFiles", recursive = TRUE)
```

```{r}
#|label: 'open parquet file dataset'

tripset <- arrow::open_dataset(sources = "tripdata",
                              format = "parquet")
```

```{r}
#|label: 'create/view list of parquets'

# To verify the location of the extracted data.
fileList <- list.files(path = "tripdata",
                              full.names = TRUE,
                              recursive = TRUE)

cat("Files in ~/tripdata: ",
    "\n\n",
    fileList)
```

```{r}
#|label: 'dbplyr pkg load, Quarto Publishing fix'

library(dbplyr)
```

```{r}
#|label: 'create dupe-table, count n distinct'

# This is a separate table used to analyze the observations returned as not distinct (n > 1). This adds an extra column labeled "n".
dupeTable <- tripset |>
    arrow::to_duckdb() |>
    dplyr::select(started_at:end_station_name) |>
    # Counts of unique rows added for column 'n'
    dplyr::add_count(started_at,
                     ended_at,
                     start_station_name,
                     end_station_name) |>
    # Only observations that have been duplicated 1 or more 
    # times are shown
    dplyr::filter(n > 1) |>
    # We want to see all rows, not just one row for each obs
    dplyr::ungroup() |>
    dplyr::arrange(started_at) |>
    dplyr::collect()

n <- dupeTable |> 
    dplyr::distinct(n) |>
    as.integer()
```

We started with 5,719,877 observations (obs) for dates spanning January to December, 2023, then removed 1,388,170 incomplete obs.

Of the other columns, it seems that the start_time, end_time, start_station, and end_station could show if there are possibly hidden duplicated observations. Those 4 variables combined results in the most granular view of any one observation. Meaning, that data would naturally only have duplicates in error.

I assumed that having the same times/dates and stations for two different ride IDs was a mistake. Although, I do not know how that error would happen. I could have assumed one person could check out multiple bikes at once. In that instance, each bike could be assigned a unique ride_id. That, however, has only happened 18 times over a year. Since it's only one copy every time, that also raises a red flag. I did not notice any other correlations with station_id/name, member_casual, or ride_type for those particular duplicated data.

```{r}
#|label: 'output to distinct duplicates and total obs'

cat(" Distinct copy count of dupes: ", n,
    "\n\n",
    "Total observations that have and are duplicates: ",
       length(dupeTable[[1]]))
```

By applying distinct() on dupeTable, we see the only distinct value is 2. We can safely conclude that, of the duplicates, each has a minimum and maximum of 1 extra copy.

Number of rows in the dupeTable is 36. Because each duplicated observation has one duplicate (n = 2), expected removed nobs is 18. The issue is that we need to get rid of not all 36 rows, but just the 1 extra duplicate observation from each, resulting in the expected 18.

```{r}
#|label: 'create un-duped table, count rows'

# The issue is, we need to get rid of not all of these rows, but just the extra duplicate observations. 

# If there were 2 rows of duplicates, we would want to end up with 1 row after removing the extras.
undupedTable <- dupeTable |>
    arrow::to_duckdb() |>
    dplyr::distinct(started_at,
                     start_station_name,
                     ended_at,
                     end_station_name,
                     .keep_all = TRUE) |>
    dplyr::collect()

n <- undupedTable |>
    dplyr::select(started_at) |>
    dplyr::distinct() |>
    dplyr::count() |>
    as.integer()
```

```{r}
#|label: 'output distinct obs, n'

cat("Count of distinct observations: ", n)
```

```{r}
#|label: 'count distinct duplicates'

# The issue is, we need to get rid of not all of these rows, but just the extra duplicate observations. 

# If there were 2 rows of duplicates, we would want to end up with 1 row after removing the extras.
undupedTable <- dupeTable |>
    arrow::to_duckdb() |>
    dplyr::distinct(started_at,
                     start_station_name,
                     ended_at,
                     end_station_name,
                     .keep_all = TRUE) |>
    dplyr::collect()

n <- undupedTable |>
    dplyr::select(started_at) |>
    dplyr::distinct() |>
    dplyr::count() |>
    as.integer()

cat("Count of distinct observations: ", n)
```

The count of observed distinct values for the un-duplicated table was indeed 18. So now, it is time to run a count of how rows/observations are in the dataset. There is a difference, though, concerning the correct amount.

```{r}
#|label: 'incorrect/correct distinct observations'

# Run a count on how many rows or observations there are in the dataset.
incorrectDistinct <- tripset |>
    arrow::to_duckdb() |>
    dplyr::distinct(dplyr::pick("ride_id")) |>
    dplyr::count(name = "Incorrect Distinct Observations") |>
    dplyr::collect() |>
    as.integer()

correctDistinct <- tripset |>
    arrow::to_duckdb() |>
    dplyr::distinct(
        dplyr::pick(
            "started_at",
            "start_station_name",
            "ended_at",
            "end_station_name"
        )
    ) |>
    dplyr::count() |>
    dplyr::collect() |>
    as.integer()
```

```{r}
#|label: 'duplicate correction tibb'
#|fig-cap: Observation Table

tibble::tibble(
    "Original Obs" = original_nobs,
    "Uncorrected Complete Obs" = incorrectDistinct,
    "Corrected Complete Obs" = correctDistinct,
    "Removed Obs" = (incorrectDistinct - correctDistinct)
)
```

The incorrect number of observations (nobs) was 4,331,707. The correct nobs after removing duplicated obs was 4,331,689. In short, 18 additional obs were removed.

```{r}
#|label: 'overwrite file with correct obs'

tripset |>
    dplyr::select(ride_id:trip_time) |>
    arrow::to_duckdb() |>
    dplyr::distinct(started_at, 
                    start_station_name, 
                    ended_at,
                    end_station_name, 
                    .keep_all = TRUE) |>
    dplyr::arrange(started_at) |>
    dplyr::collect() |>
    arrow::write_dataset(
        path = "tripdata",
        format = "parquet",
        existing_data_behavior = "overwrite"
    )
```

Noting that it was useful for me to retain certain rows at first to determine if there were duplicates.

```{r}

tripset <- arrow::open_dataset("tripdata",
                               format = "parquet")

dbconn <- DBI::dbConnect(duckdb::duckdb())

# For querying the arrow dataset with the benefits of an OLAP database. 
duckdb::duckdb_register_arrow(dbconn,
                              "unfltrd_tripData",
                              tripset)
```

## Filtering Data, Smartly

To ensure the conclusions are accurate, outliers should be filtered. Negative and very low trip times might skew trends. The underlying reason for very low trip times is somewhat of an unknown. Perhaps people often change their minds?

```{r}
#|label: 'add/filter distances and speed'

# imposing sensible limits on the data we wish to include moving forward
# might as well calculate distance traveled while at it
dplyr::tbl(dbconn,
           "unfltrd_tripData") |>
    dplyr::filter(trip_time > 1,
                  trip_time < 480) |>
    dplyr::collect() |>
    dplyr::mutate(
        miles = geosphere::distGeo(
            p1 = cbind(start_lng, start_lat),
            p2 = cbind(end_lng, end_lat)
        ) / 1000 * 0.62137119,
        mph = (miles / (trip_time / 60))
    ) |>
    # It's somewhat nonsensical to rent a bike for distances easily walked. 
    # Also, there could be randomly generated data.
    dplyr::filter(miles > 0.1,
                  # Seems that pro cyclists average around 20 mph, 
                  # so I set that as the ceiling.
                  mph < 21,
                  # To account for time spent idling, stoplights and traffic.
                  mph > 1) |>
    duckdb::dbWriteTable(conn = dbconn,
                         name = "fltrd_tripData")
```

Writing the Filtered Parquet File

```{r}
#|label: 'write fltrdData parquet'

dplyr::tbl(dbconn,
           "fltrd_tripData")

dir.create("fltrdData")

dplyr::tbl(dbconn,
           "fltrd_tripData") |>
    arrow::to_arrow() |>
    arrow::write_parquet(sink = "fltrdData/fltrd.parquet")

# Now we have a filtered data file. 
unlink('tripdata', recursive = TRUE)
```

```{r}
#|label: 'rider count by hour table'

hours_of_Riders <- dplyr::tbl(dbconn,
                           "fltrd_tripData") |>
    dplyr::select(started_at) |>
    dplyr::mutate("hour" = lubridate::hour(started_at)) |>
    dplyr::group_by(hour) |>
    dplyr::summarise("riding" = dplyr::count(started_at)) |>
    dplyr::arrange(hour) |>
    dplyr::collect() |>
    dplyr::mutate("hour" = hms::hms(hours = hour),
                  "hour" = format(strptime(hour, format = "%H"), "%r"),
                  "index" = seq(1:24))
```

```{r}
#|label: 'radial-column plot'

ggplot2::ggplot(data = hours_of_Riders,
                mapping = ggplot2::aes(
                    x = reorder(hour, .data$index),
                    y = riding,
                    fill = riding
                )) +
    ggplot2::geom_col() +
    ggplot2::coord_radial(start = 2 * pi,
                          inner.radius = .2) +
    ggplot2::xlab(NULL) +
    ggplot2::ylab(NULL) +
    ggplot2::scale_fill_distiller(palette = 'Spectral',
                                  direction = 1) +
    ggplot2::labs(
        title = "Average Riders by the Hour of Day",
        subtitle = "(Jan-Dec 2023)",
        caption = "Data from cyclistic database.",
        tag = "Figure 1.c"
    ) +
    ggplot2::theme(
        title = ggplot2::element_text(size = 16,lineheight = 4),
        text = ggplot2::element_text(color = "white"),
        panel.background = ggplot2::element_rect(fill = "black"),
        panel.grid.minor = ggplot2::element_line(color = "black"),
        panel.grid.major = ggplot2::element_line(color = "grey10"),
        plot.background = ggplot2::element_rect(fill = "black"),
        axis.text.y = ggplot2::element_blank(),
        axis.ticks.y = ggplot2::element_blank(),
        axis.text.x = ggplot2::element_text(size = 10,
                                            color = "grey90"),
        legend.background = ggplot2::element_rect(fill = "black"),
        legend.ticks = ggplot2::element_line(color = "black",
                                             linewidth = .5),
        legend.text = ggplot2::element_text(color = 'grey80',
                                             size = 8),
        legend.title = ggplot2::element_blank(),
        legend.position = "right",
        legend.justification = "center",
        legend.direction = "vertical"
    )
```

```{r}
#|label: "column plot"

memberCasuals_monthly  <- dplyr::tbl(dbconn,
           "fltrd_tripData") |>
    dplyr::select(started_at,
                  member_casual) |>
    dplyr::mutate('month' = lubridate::month(started_at)) |>
    dplyr::group_by(month,
                    member_casual) |>
    dplyr::summarize("riderCount" = dplyr::count(member_casual)) |>
    dplyr::arrange(month)

dplyr::collect(memberCasuals_monthly) |>
    ggplot2::ggplot() +
    ggplot2::geom_col(mapping = ggplot2::aes(x = factor(month),
                                             y = riderCount,
                                             fill = member_casual),
                      color = "black",
                      position = 'dodge2') +
    ggplot2::scale_x_discrete(labels = month.abb,
                              name = "Month") +
    ggplot2::scale_fill_brewer(palette = 'Set2') +
    ggplot2::theme_dark() +
    ggplot2::labs(
    title = "Monthly Ridership: Members vs Casuals",
    subtitle = "(Jan-Dec 2023)",
    caption = "Data from cyclistic database.",
    tag = "Figure 1.b")
```

```{r}
#|label: "duckDB shutdown"

duckdb::dbDisconnect(dbconn, shutdown = TRUE)
```

## Visualizations

for quick reference with using Tsibble syntax

```{r}
#|label: 'register fltrd data to duckDB'

tripset <- arrow::open_dataset("fltrdData",
                               format = "parquet")

dbconn <- DBI::dbConnect(duckdb::duckdb())

# For querying the arrow dataset with the benefits of an OLAP database. 
duckdb::duckdb_register_arrow(dbconn,
                              "fltrd_data",
                              tripset)
```

```{r}
#|label: 'grouped tibb'

grouped_byDay <- dplyr::tbl(dbconn,
                            "fltrd_data") |>
    dplyr::select(started_at,
                  member_casual) |>
    dplyr::collect() |>
    dplyr::mutate(started_at = as.Date(started_at)) |>
    dplyr::group_by(started_at,
                    member_casual) |>
    dplyr::summarize(n = dplyr::n(),
                     sdev = stats::sd(n))
```

```{r}
#|label: 'to grouped tsibb'

# tsibble, time-series table/tibble seems to make time series plots more straightforward
grouped_tsi <- grouped_byDay |>
    tsibble::as_tsibble(key = c(member_casual,
                                n),
                        index = started_at) |>
    dplyr::arrange(started_at)
```

```{r}
#|label: 'scatter plot'

grouped_tsi |> ggplot2::ggplot(
    mapping = ggplot2::aes(x = started_at, 
                           y = n,
                           color = grouped_tsi$member_casual
                           )) +
    ggplot2::geom_point(size = 3,
                        alpha = 0.25) +
    ggplot2::scale_color_brewer(palette = "Dark2") +
    ggplot2::labs(title = "Daily Count by Membership Type",
                  subtitle = "2023",
                  x = "Month",
                  y = "Count")
```

```{r}
#|label: "map query setup"

# chicago starting coordinates for leaflet, setView
chicago <- maps::us.cities |>
    dplyr::select("name",
                  "long",
                  "lat") |>
    dplyr::filter(name == "Chicago IL")

# full dataset coordinates, might need to sample
coordQry <- dplyr::tbl(dbconn,
                       "fltrd_data") |>
    dplyr::select(start_lng,
                  start_lat) |>
    dplyr::add_count(start_lng,
                     start_lat) |>
    dplyr::distinct() |>
    dplyr::arrange(desc(n)) |>
    dplyr::collect()


coordQry_small <- dplyr::tbl(dbconn,
                       "fltrd_data") |>
    dplyr::select(start_lng,
                  start_lat) |>
    dplyr::add_count(start_lng,
                     start_lat) |>
    dplyr::distinct() |>
    dplyr::arrange(desc(n)) |>
    dplyr::collect() |>
    dplyr::slice_head(n = 50)
```

```{r}
#|label: "leaflet"

leaflet::leaflet() |>
    leaflet::addTiles() |>
    leaflet::setView(lng = chicago$long,
                     lat = chicago$lat,
                     zoom = 10) |>
    leaflet::addMarkers(lng = coordQry$start_lng[1:50],
                        lat = coordQry$start_lat[1:50],
                        clusterOptions = leaflet::markerClusterOptions())
```

```{r}
#|label: "mapview"

coordQry_small |>
    sf::st_as_sf(coords = c(1:2),
                crs = 4326) |>
    mapview::mapview()
```

```{r}
#|label: "tmap"

illi <- subset(spData::us_states, NAME == "Illinois")
tmap::tmap_mode("view")
coordQry_small |>
    sf::st_as_sf(coords = c(1:2),
                 crs = 4326) |>
    tmap::tm_shape() +
    tmap::tm_markers(clustering = TRUE) +
    tmap::tm_basemap(server = c('OpenStreetMap'))
```

```{r}
ojs_define(js_tsi = grouped_tsi)
```

```{ojs}
jsData = transpose(js_tsi)
```

```{ojs}
Plot.plot({
    grid: true,
    color: {legend: true},
    marks: [
        Plot.dot(jsData, {x: 'started_at', y: 'n', fill: 'member_casual'})
]
})
```

```{ojs}
Plot.plot({
    grid: true,
    color: {legend: true},
    marks: [
        Plot.dot(jsData, {x: 'started_at', y: 'n', fill: 'member_casual' })
]
})
```

```{ojs}
Plot.lineY(jsData, {x: "started_at", y: "n"}).plot()
```

```{ojs}
Inputs.table(jsData, {
rows: 20
})
```

```{r}
#|label: 'line plot'

grouped_tsi |> ggplot2::ggplot(
    mapping = ggplot2::aes(x = started_at, 
                           y = n,
                           color = grouped_tsi$member_casual
                           )) +
    ggplot2::geom_line(stat = 'align',
                       lineend = 'round',
                       linejoin = 'mitre',
                       linewidth = .5,
                       alpha = .8) +
    ggplot2::scale_color_brewer(palette = "Set1") +
    ggplot2::labs(title = "Daily Count by Membership Type",
                  subtitle = "2023",
                  x = "Year-Month",
                  y = "Count")
```

```{r}
#|label: 'area plot'

grouped_tsi |> ggplot2::ggplot(
    mapping = ggplot2::aes(x = started_at, 
                           y = n,
                           fill = grouped_tsi$member_casual)) +
    ggplot2::geom_area(alpha = 0.8) +
    ggplot2::scale_x_date(date_breaks = "month",
                          minor_breaks = "day",
                          date_labels = "%b") +
    ggplot2::scale_fill_brewer(palette = "Dark2") +
    ggplot2::labs(title = "Daily Count by Membership Type",
                  subtitle = "2023",
                  x = "Month",
                  y = "Count")
```

```{r}
#|label: 'histogram plot'

# query for the histogram plot
qry4_histo <- dplyr::tbl(dbconn,
           "fltrd_data") |>
    dplyr::select(started_at, member_casual) |>
    dplyr::collect() |>
    dplyr::mutate(started_at = as.Date(started_at)) |>
    dplyr::group_by(member_casual) |>
    dplyr::arrange(started_at)

# histogram plot
qry4_histo |> ggplot2::ggplot(
    mapping = ggplot2::aes(x = started_at, 
                           fill = qry4_histo$member_casual)) +
    ggplot2::geom_histogram(alpha = 0.6,
                            bins = 365
                            ) +
    ggplot2::scale_x_date(date_breaks = "1 month",
                          date_minor_breaks = 'days',
                          date_labels = "%b") +
    ggplot2::scale_fill_brewer(palette = "Dark2") +
    ggplot2::labs(title = "Daily Count by Membership Type",
                  subtitle = "2023",
                  x = "Months",
                  y = "Count")
```

```{r}
#|label: 'grouped stats tibb'

groupedStats_byDay <- dplyr::tbl(dbconn,
                            "fltrd_data") |>
    dplyr::select(started_at,
                  member_casual,
                  rideable_type,
                  trip_time,
                  miles,
                  mph) |>
    dplyr::collect() |>
    dplyr::mutate(started_at = as.Date(started_at)) |>
    dplyr::group_by(started_at,
                    member_casual,
                    rideable_type) |>
    dplyr::summarize(n = dplyr::n(),
                     trip_time_Mean = mean(trip_time),
                     trip_time_stDev = stats::sd(trip_time),
                     miles_Mean = mean(miles),
                     miles_stDev = stats::sd(miles),
                     mph_Mean = mean(miles),
                     mph_stDev = stats::sd(mph))
```

```{r}
#|label: 'grouped stats tsibb'

groupedStats_tsib <- groupedStats_byDay |>
    tsibble::as_tsibble(key = c(member_casual:mph_stDev),
                        index = started_at) |>
    dplyr::arrange(started_at)
```

```{r}
#|label: 'Ribbon-Line Plot'
groupedStats_tsib |> 
    ggplot2::ggplot(ggplot2::aes(started_at,
                                 group =  rideable_type)) +
    ggplot2::geom_ribbon(alpha = 0.4,
        ggplot2::aes(
            ymin = (groupedStats_tsib$trip_time_Mean -
                groupedStats_tsib$miles_stDev),
            ymax = (groupedStats_tsib$trip_time_Mean +
                groupedStats_tsib$miles_stDev)),
                         fill = 'white') +
        ggplot2::geom_line(ggplot2::aes(y = trip_time_Mean,
                                    color = rideable_type),
                           alpha = 1) + 
    ggplot2::scale_x_date(date_labels = '%B',
                          date_minor_breaks = 'days',
                          limits = as.Date(c('2023-01-01', '2024-01-01'))) +
    ggplot2::scale_color_brewer(palette = 'Pastel1') +
    ggplot2::theme_dark()
```

```{r}
#|label: 'Facet-Wrap Plot' 
groupedStats_byDay <- dplyr::tbl(dbconn,
                            "fltrd_data") |>
    dplyr::select(started_at,
                  member_casual,
                  rideable_type,
                  trip_time,
                  miles,
                  mph) |>
    dplyr::collect() |>
    dplyr::mutate(started_at = as.Date(started_at)) |>
    dplyr::group_by(started_at,
                    member_casual,
                    rideable_type) |>
    dplyr::summarize(n = dplyr::n(),
                     trip_time_Mean = mean(trip_time),
                     trip_time_stDev = stats::sd(trip_time),
                     miles_Mean = mean(miles),
                     miles_stDev = stats::sd(miles),
                     mph_Mean = mean(miles),
                     mph_stDev = stats::sd(mph))

groupedStats_tsib <- groupedStats_byDay |>
    tsibble::as_tsibble(key = c(member_casual:mph_stDev),
                        index = started_at) |>
    dplyr::arrange(started_at)

groupedStats_tsib |>
    ggplot2::ggplot(ggplot2::aes(x = started_at,
                                 y = trip_time_Mean,
                                 color = trip_time_Mean)) +
    ggplot2::geom_count(size = 3) +
    ggplot2::facet_wrap(~member_casual+rideable_type) +
    ggplot2::scale_x_date(date_minor_breaks = "days",
                          date_labels = "%b",
                          breaks = "months") +
    ggplot2::theme(axis.text.x = ggplot2::element_text(angle = 45,
                                                       hjust = 1),
                   panel.background = ggplot2::element_rect(fill = 'grey20'),
                   panel.grid.major.y = ggplot2::element_line(
                       linetype = 'dashed',
                       color = 'grey30'),
                   panel.grid.major.x = ggplot2::element_line(
                       linetype = 'dotted',
                       color = 'grey30'),
                   panel.grid.minor = ggplot2::element_blank(),
                   strip.background.x = ggplot2::element_rect(
                       fill = 'yellowgreen')) +
    ggplot2::scale_color_distiller(palette = 'Spectral')
```

```{r}
#|label: "dygraph"

newdf <- groupedStats_byDay |>
    dplyr::ungroup() |>
    dplyr::select(started_at, 
                  n)

dygraphs::dygraph(newdf, main = "ever",
                  ylab = "what")

#predicted <- predict(df, n.ahead = 72, prediction.interval = TRUE )
```

These maps track bike-sharing activity going on worldwide and in Chicago.

[Bike Share Map](https://bikesharemap.com/#/8/-87.5771/41.3747/) [@bikesha]

[CityBikes: bike sharing networks around the world](https://citybik.es/) [@citybike]

```{r, eval = FALSE}
#|label: 'drops duckDB tables'

# a chunk for easily dropping either all (default) or specific tables from the ddb. Also made it so you can see the current tables and then the tables after running the chunk.

paths <- duckdb::dbListTables(dbconn)

paths[]

drops_tables <- function(path) {
    
    duckdb::dbRemoveTable(dbconn, 
                          path)
}

paths[] |> purrr::walk(drops_tables)

paths <- duckdb::dbListTables(dbconn)

paths[]
```

```{r}
#|label: 'duckDB Shutdown'

duckdb::dbDisconnect(dbconn, shutdown = TRUE)
```
