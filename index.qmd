---
title: "Case study: Bike-sharing program in the chicago area"
author: "Eric Mossotti"
date: "05-01-2024"
bibliography: references.bib
repo: https://github.com/ericMossotti/Bike_Share
source: index.qmd
abstract-title: "Objective"
abstract: "Communicate data-driven insights to stakeholders."
description-meta: "Communicate data-driven insights to stakeholders."

code-links:
    - text: "Project Repo"
      href: repo
code-fold: true
code-copy: hover
code-overflow: wrap
code-tools: true
code-link: true


toc-expand: true
toc: true
#toc_float: true

smooth-scroll: true
fig-responsive: true
echo: true

#margin-left: 10vw
#margin-right: 5vw
#margin-top: 5vh
#margin-bottom: 5vh

#font: merriweather, futura
---

```{r, include = FALSE}

knitr::opts_chunk$set(message = FALSE, 
                      warning = FALSE)

```


----

# Import and Project Design

:::::::::: {#offcanvas1 .offcanvas .offcanvas-end tabindex="-1" aria-labelledby="offcanvas" style="width: auto"}
::::::::: offcanvas-header
:::::::: {#offcanvasLabel .h5 .offcanvas-title}
Stepping Through Code
::::::::
:::::::: {.btn-close type="button" data-bs-dismiss="offcanvas" ariaLabel="Close"}
::::::::
:::::::::
::::::::: offcanvas-body
:::::::: flex-code
```{r}
#| label: importOrConnect
#| code-summary: First, we decide whether to download and do the necessary initial processing steps or skip that if we have already done this and are just tinkering around with the project. 

if(exists("dbconn") == FALSE &&
   dir.exists("db") == FALSE) {
    # Script to keep this document less cluttered.
    source("import_clean_initial.R")
} else {
    # You will have to change original_nobs if you use            
    #  different data. It helps with tinkering when 
    #   you want to skip the import step.
    original_nobs <- as.integer(5719877)
    
    tblPath <- "db/data.db"
    
    dbconn <- DBI::dbConnect(
        duckdb::duckdb(),
        dbdir = tblPath,
        read_only = FALSE,
        check_from = FALSE
    )
}
```

```{r}
#| label: importProcessScript
#| code-summary: Second, this executes if the right if-else conditions are met. Usually, this would only execute if you have never before executed or have deleted the database. 
#| file: "import_clean_initial.R"
#| eval: false 
```

```{r}
#| label: tbl-dbList
#| code-summary: Third, it would now be helpful to verify the tables that were made.
#| tbl-cap: Database Table List

dbList <- duckdb::dbListTables(dbconn) |>
    data.frame() |>
    gt::gt() |>
    gt::tab_header(
        title = "Database Tables",
        subtitle = "List of table paths in our DuckDB") |>
    gt::cols_label(
        "duckdb..dbListTables.dbconn." = "Table Paths"
    ) |>
    gt::tab_options(
        table.background.color = "transparent",
        table.font.color = "SeaShell",
        column_labels.hidden = TRUE,
        row.striping.background_color = "gray10",
        row.striping.include_table_body = TRUE,
        table.font.size = gt::px(13)
    )

dbList
```

::::::::
:::::::::
::::::::::

Data source for this data analysis was obtained from Divvy Data. Thinking ahead with reproducibility in mind, should cover most use cases for tinkering and testing. I have found it helpful to reduce the need to re-download files and re-process all over again if all one needs to do is reconnect to the database that has already been written. [@divvyda]

As a counterpart to the if-else design decision at the top of the project, I've condensed the initial download, import and cleaning steps inside of an R-script. Choosing a persistent DuckDB filesystem (as opposed to in-memory) was intentional as I wouldn't lose the progress I've made when tinkering over multiple days. It seems just as fast as the in-memory database but also seems to reduce RAM needed in tinkering. [@whyduck]

:::: {.d-flex .justify-content-center}
::: {.btn .btn-secondary type="button" data-bs-toggle="offcanvas" data-bs-target="#offcanvas1" aria-controls="offcanvas"}
```{=html}
<i class="bi bi-code-slash" style="font-size: 1.5rem; color: cornflowerblue"></i>
```
:::
::::

# Hidden Duplicates?

Now to go a little deeper, we can check for duplicates. It might not necessarily be the case that each observation (obs) is unique even if all the Rider IDs are, technically, unique. Of the other columns, it seems that the start_time, end_time, start_station, and end_station, if combined, could show if there are possibly hidden duplicated observations. We started with 5,719,877 observations (obs) for dates spanning January to December, 2023, then removed 1,388,170 incomplete obs.

I assumed that having the same times/dates and stations for two different ride IDs was a mistake. Although, I do not know how that error would happen, I could have assumed one person could check out multiple bikes at once. In that instance, each bike would be assigned a unique ride_id. That, however, has only happened 18 times over a year. Since it's only one copy every time, that also raises a red flag in my mind. I did not notice any other correlations with station_id/name, member_casual, or ride_type for those particular duplicated data.

:::::::::: {#offcanvas2 .offcanvas .offcanvas-end tabindex="-1" aria-labelledby="offcanvas" style="width: auto"}
::::::::: offcanvas-header
:::::::: {.h5 .offcanvas-title}
Stepping Through the Code
::::::::
:::::::: {.btn-close type="button" data-bs-dismiss="offcanvas" ariaLabel="Close"}
::::::::
:::::::::
::::::::: offcanvas-body
:::::::: flex-code
```{r}
#| label: duplicates_gt
#| code-summary: First, creates a table containing the duplicated observations.

# This is a separate table used to analyze the observations 
#  returned as not distinct (n > 1). 
#   This adds an extra column, labeled "n".
dupeTable <- dplyr::tbl(dbconn,
                        tblPath,
                        check_from = FALSE) |>
    dplyr::select(started_at:end_station_name) |>
    # Counts of unique rows added for column 'n'
    dplyr::add_count(started_at,
                     ended_at,
                     start_station_name,
                     end_station_name) |>
    # Only observations that have been duplicated 
    #  1 or more times are shown.
    dplyr::filter(n > 1) |>
    # We want to see all rows, 
    #  not just one row for each obs.
    dplyr::ungroup() |>
    dplyr::arrange(started_at) |>
    dplyr::collect()
```

```{r}
#| label: duplicateObs count
#| code-summary: Second, records a count of distinct duplicates and total observations.

distinctCopiesCount <- dupeTable |>
    dplyr::distinct(n) |>
    as.integer() 

duplicateObs <- length(dupeTable[[1]])
```

```{r}
#| label: undupedTable
#| code-summary:  Third, creates a table of the now unduplicated observations we saw before.

# The issue is, we need to get rid of not all of these rows,
#  but just the extra duplicate observations. 

# If there were 2 rows of duplicates, 
#  we would want to end up with 1 row after 
#   removing the extras.
undupedTable <- dupeTable |>
    dplyr::distinct(started_at,
                     start_station_name,
                     ended_at,
                     end_station_name,
                     .keep_all = TRUE)
```


```{r}
#| label: incorrect distinct obs count
#| code-summary: Fourth, records a count of the incorrect observations.

# Run an incorrect count on how many rows or observations 
#  there are in the dataset.
count_incorrectDists <- dplyr::tbl(dbconn,
                                   tblPath,
                                   check_from = FALSE) |>
    dplyr::distinct(dplyr::pick("ride_id")) |>
    dplyr::count(name = "Incorrect Distinct Observations") |>
    dplyr::collect() |>
    as.integer()
```

```{r}
#| label: count_correctDists count
#| code-summary: Fifth, records a count of the correct observations.

# For the correct count of obs
count_correctDists <- dplyr::tbl(dbconn,
                                 tblPath,
                                 check_from = FALSE) |>
    dplyr::distinct(
        dplyr::pick(
            "started_at",
            "start_station_name",
            "ended_at",
            "end_station_name"
        )
    ) |>
    dplyr::count() |>
    dplyr::collect() |>
    as.integer()
```

```{r}
#| label: 'overwrite file with correct obs'
#| code-summary: Sixth, writes the unduplicated data to the database.

dupelessPath <- "db/dupeless.db"
 
dplyr::tbl(dbconn,
           tblPath,
           check_from = FALSE) |>
    dplyr::select(ride_id:trip_time) |>
    dplyr::distinct(started_at,
                    start_station_name,
                    ended_at,
                    end_station_name,
                    .keep_all = TRUE) |>
    dplyr::arrange(started_at) |>
    dplyr::collect() |>
    duckdb::dbWriteTable(conn = dbconn,
                         name = dupelessPath,
                         overwrite = TRUE,
                         check_from = FALSE)
```
::::::::
:::::::::
::::::::::

::::::::::: {.column-page}
:::::::::: {.panel-tabset}

### Duplicates View

```{r}
#| label: tbl-duplicates
#| tbl-cap: Duplicates Table

gtDupes <- dupeTable |>
    dplyr::group_by(started_at) |>
    gt::gt(rowname_col = "row",
           groupname_col = "started_at",
           row_group_as_column = TRUE,
           caption = "Duplicates_Table1") |>
    gt::tab_style(
    style = list(
        gt::cell_text(weight = "bold",
                      align = "center"),
        gt::cell_borders(sides = c("bottom"))
    ),
    locations = gt::cells_column_labels(gt::everything())
    ) |>
    gt::tab_style(
    style = list(
        gt::cell_borders(sides = c("left", "right"),
                         color = "transparent"),
        gt::cell_text(align = "center",
                      v_align = "middle")
    ),
    locations = gt::cells_body(gt::everything())
    ) |>
    gt::data_color(columns = start_station_name,
                   target_columns = gt::everything(),
                   method = "auto",
                   palette = "basetheme::brutal") |>
    gt::tab_source_note(gt::md("**Source**: Divvy Data")) |>
    gt::tab_header(title = "Duplicate Observations",
                   subtitle = "By the starting date-time") |>
    gt::tab_options(
        heading.title.font.weight = "bolder",
        heading.subtitle.font.weight = "lighter",
        table.background.color = "transparent",
        table.font.color = "SeaShell",
        table.font.size = gt::pct(75))

gtDupes
```

### Unduplicated View

```{r}
#| label: tbl-unduplicated
#| tbl-cap: Un-duplicated Table


undupedTable |>
    dplyr::collect() |>
    dplyr::group_by(started_at) |>
    gt::gt(rowname_col = "row",
           groupname_col = "started_at",
           row_group_as_column = TRUE,
           caption = "Table2") |>
    gt::tab_style(
    style = list(
        gt::cell_text(weight = "bold",
                      align = "center"),
        gt::cell_borders(sides = c("bottom"))
    ),
    locations = gt::cells_column_labels(gt::everything())
    ) |>
    gt::tab_style(
    style = list(
        gt::cell_borders(sides = c("left", "right")),
        gt::cell_text(align = "center",
                      v_align = "middle")
    ),
    locations = gt::cells_body(gt::everything())
    ) |>
    gt::data_color(columns = start_station_name,
                   target_columns = gt::everything(),
                   method = "auto",
                   palette = "basetheme::brutal") |>
    gt::tab_source_note(gt::md("**Source**: Divvy Data")) |>
    gt::tab_header(title = "Un-Duplicated Observations",
                   subtitle = "Grouped by start date)") |>
    gt::tab_options(
        heading.title.font.weight = "bolder",
        heading.subtitle.font.weight = "lighter",
        table.layout = "auto",
        table.background.color = "transparent",
        table.font.color = "SeaShell",
        table.font.size = gt::pct(75)
        )
```

### Verify Dupeless

```{r}
#| label: tbl-dupelessDB
#| tbl-cap: Database Table Contents

dplyr::tbl(dbconn,
           dupelessPath) |>
    head() |>
    gt::gt() |>
    gt::tab_header(
        title = "Un-Duplicated DB Table",
        subtitle = "Top 10 rows from the database table"
    ) |>
    gt::tab_style(
        gt::cell_borders(sides = c("left", "right"),
                         color = "gray20",
                         weight = gt::px(1)),
    locations = list(
        gt::cells_body(columns = gt::everything())
        )
    ) |>
    gt::tab_options(
        table.background.color = "transparent",
        table.font.color = "SeaShell",
        row.striping.background_color = "gray10",
        row.striping.include_table_body = TRUE,
        table_body.hlines.color = "gray20",
        table_body.vlines.color = "gray20",
        table.font.size = gt::pct(75),
    )
```

### Summary of Processsing

```{r}
#| label: tbl-observationHistory
#| tbl-cap: Observation Processing History

# To see the history of obs in our dataset.
summaryProcessTable <- tidyr::tribble(
    ~ "Observations",
    ~ "Counts",
    "Original   ",
    original_nobs,
    "Processed   ",
    count_incorrectDists,
    "Duplicates   ",
    (count_incorrectDists - count_correctDists),
    "Total Corrected   ",
    count_correctDists ) |>
    gt::gt(rownames_to_stub = FALSE) |>
    gt::tab_header(title = "Tallying Observations") |>
    gt::tab_footnote(
        footnote = gt::md("Row counts throughout the cleaning steps."),
        locations = gt::cells_column_labels(columns = Counts)
    ) |>
    gt::tab_style(
        style = list(
            gt::cell_borders(sides = "bottom"),
            gt::cell_text(
                align = "left",
                stretch = "semi-expanded",
                whitespace = "break-spaces"
            )
        ),
        locations = gt::cells_body(gt::everything())
    ) |>
    gt::tab_style(
        gt::cell_text(
            align = "center",
            stretch = "semi-expanded",
            whitespace = "break-spaces"),
        locations = list(
            gt::cells_title(groups = c("title", "subtitle")),
            gt::cells_column_labels(gt::everything())
            )
        ) |>
    gt::tab_options(quarto.use_bootstrap = TRUE,
                    column_labels.font.weight = "bold",
                    table.background.color = "transparent",
                    table.font.color = "SeaShell",
                    row.striping.background_color = "gray10",
                    row.striping.include_table_body = TRUE)

summaryProcessTable
```
::::::::::::
:::::::::::::

By applying distinct() on dupeTable, we see the only distinct value, n, is 2. I conclude that, of the duplicates, each has a minimum and maximum of 1 extra copy. Number of rows in the dupeTable is 36. Because each duplicated observation has one duplicate, n = 2, expected removed obs is 18. The issue is that we need to get rid of not all 36 rows, but just one extra duplicate observation from each. This will result in the expected 18 obs.

The count of distinct n-values for the un-duplicated table was indeed 18. So now, it is time to run a count of how rows/observations are in the dataset. There is a difference, though, concerning the correct amount. The incorrect nobs was 4,331,707. The correct nobs after removing duplicated obs was 4,331,689. In short, 18 additional obs were removed. We can now add the processed table to our database. Might be a good idea to verify the table is where it should be.

:::: {.d-flex .justify-content-center}
::: {.btn .btn-secondary type="button" data-bs-toggle="offcanvas" data-bs-target="#offcanvas2" aria-controls="offcanvas"}
```{=html}
<i class="bi bi-code-slash" style="font-size: 1.5rem; color: cornflowerblue"></i>
```
:::
::::


# Outlier Filter

It might be helpful to remove some outliers to better see the trends. Negative and low trip times are noted but might skew trends. The underlying reason for low trip times could be from people just wanting to try it out. I don't know why there were observations with negative trip times. There were observations that didn't make much sense, but we try to retain most of the data.

As in the first part, an if-else code-chunk design was chosen because it makes testing easier. It's not required but is nice-to-have. Removing the nonsensical outliers, on the other hand, is required. This code chunk accomplishes both, regardless, or if you are just testing and already have the filtered database table or if you still need to create it. 

A database filtering script was used to make the code chunk easier to follow. We then verify the table does exist now along with all other tables we previously created. So this should have removed outliers from the dataset which don't serve the scope of this analysis or could be erroneous data.


::: {.codeDisplayer}
```{r}
#| label: lst-filterScript
#| code-summary: This would execute if the if-else conditions were met to filter the db/data.db database table
#| file: "filterDatabase.R"
#| eval: false
#| lst-cap: "Filter Database Script"
```
:::

:::: {.d-flex .justify-content-center}
::: {.btn .btn-secondary type="button" data-bs-toggle="offcanvas" data-bs-target="#offcanvas33" aria-controls="offcanvas"}
```{=html}
<i class="bi bi-code-slash" style="font-size: .75em; color: cornflowerblue;"></i>
```
:::
::::

:::::::: {#offcanvas33 .offcanvas .offcanvas-start tabindex="-1" aria-labelledby="offcanvas" style="width: auto"}
::::::: offcanvas-header
:::::: {.h5 .offcanvas-title}
Filter Database 
::::::
:::::: {.btn-close type="button" data-bs-dismiss="offcanvas" ariaLabel="Close"}
::::::
:::::::
::::::: offcanvas-body
:::::: flex-code
```{r}
#| label: filtering db
#| code-summary: First, if you happen to be re-using this code - this is so you do not have to re-download or re-filter after making further adjustments.

tblPath <- "db/data.db"
dupelessPath <- "db/dupeless.db"
tblPath_fltrd <- "db/data_fltrd.db"

if (exists("dbconn") == FALSE && dir.exists("db") == TRUE) {
    dbconn <- DBI::dbConnect(
        duckdb::duckdb(),
        dbdir = tblPath,
        read_only = FALSE,
        check_from = FALSE
    )
}

if (duckdb::dbExistsTable(dbconn,
                          "tblPath_fltrd") == FALSE) {
    source("filterDatabase.R")
    filterDatabase()
}
```
::::::
:::::::
::::::::

:::::: {.column-body}

# Frequency Tables and What They Tell Us

Now we're going to create frequency tables and add those to the database. We can retain the outliers in those tables and perhaps filter as needed later. This is a good place to start. If needed, we can dive deeper into other statistical techniques or adjust parameters in these code chunks and overwrite or create new db tables. By generating frequency tables, one can quickly glean insights from the data.
::::::

:::::::::: {#offcanvas10 .offcanvas .offcanvas-end tabindex="-1" aria-labelledby="offcanvas" style="width: auto"}
::::::::: offcanvas-header
:::::::: {.h5 .offcanvas-title}
Frequency Tables (other code)
::::::::

:::::::: {.btn-close type="button" data-bs-dismiss="offcanvas" ariaLabel="Close"}
::::::::
:::::::::

::::::::: offcanvas-body
:::::::: flex-code
```{r}
#| label: frequencyWrites_totals
#| code-summary: First, writes the totals frequency tables to database.

# For the membership frequency
dplyr::tbl(dbconn,
           tblPath_fltrd,
           check_from = FALSE) |>
    dplyr::select(member_casual) |>
    dplyr::group_by(member_casual) |>
    dplyr::summarize(n = dplyr::n()) |>
    dplyr::collect() |>
    duckdb::dbWriteTable(conn = dbconn,
                         name = "db/freq_member.db",
                         overwrite = TRUE,
                         check_from = FALSE)

# For the rideable types.
dplyr::tbl(dbconn,
           tblPath_fltrd,
           check_from = FALSE) |>
    dplyr::select(rideable_type) |>
    dplyr::group_by(rideable_type) |>
    dplyr::summarize(n = dplyr::n()) |>
    dplyr::collect() |>
    duckdb::dbWriteTable(conn = dbconn,
                         name = "db/freq_rTypes.db",
                         overwrite = TRUE,
                         check_from = FALSE)

# For the miles
dplyr::tbl(dbconn,
           tblPath_fltrd,
           check_from = FALSE) |>
    dplyr::select(miles) |>
    dplyr::collect() |>
    dplyr::mutate(miles = dplyr::case_when(
        miles >= 1 ~ round(miles,
                           digits = 0),
        miles < 1 ~ round(signif(miles, 3),
                          digits = 1)
    )) |>
    dplyr::group_by(miles) |>
    dplyr::summarize(n = dplyr::n()) |>
    dplyr::arrange(miles) |>
    duckdb::dbWriteTable(
        conn = dbconn,
        name = "db/freq_miles.db",
        check_from = FALSE,
        overwrite = TRUE)

# For the mph
dplyr::tbl(dbconn,
           tblPath_fltrd,
           check_from = FALSE) |>
    dplyr::select(mph) |>
    dplyr::mutate(mph = round(mph, digits = 0)) |>
    dplyr::group_by(mph) |>
    dplyr::summarize(n = dplyr::n()) |>
    dplyr::collect() |>
    dplyr::arrange(mph) |>
    duckdb::dbWriteTable(conn = dbconn,
                         name = "db/freq_mph.db",
                         check_from = FALSE,
                         overwrite = TRUE)

# For the week days
dplyr::tbl(dbconn,
           tblPath_fltrd,
           check_from = FALSE) |>
    dplyr::select(started_at) |>
    dplyr::mutate(wkday = lubridate::wday(started_at)) |>
    dplyr::group_by(wkday) |>
    dplyr::summarize(n = dplyr::n()) |>
    dplyr::arrange(wkday) |>
    dplyr::collect() |>
    dplyr::mutate(wkday = c("Sun",
                            "Mon",
                            "Tue",
                            "Wed",
                            "Thu",
                            "Fri",
                            "Sat"),
                  wkday = forcats::as_factor(wkday),
                  wkday = forcats::fct_inorder(wkday)) |>
    duckdb::dbWriteTable(conn = dbconn,
                         name = "db/freq_wkDay.db",
                         check_from = FALSE,
                         overwrite = TRUE)

# For the months.
dplyr::tbl(dbconn,
           tblPath_fltrd,
           check_from = FALSE) |>
    dplyr::select(started_at) |>
    dplyr::mutate(months = lubridate::month(started_at,
                                            label = FALSE,
                                            abbr = TRUE
                                            )) |>
    dplyr::group_by(months) |>
    dplyr::summarize(n = dplyr::n()) |>
    dplyr::collect() |>
    dplyr::arrange(months) |>
    dplyr::mutate(months = c(month.abb),
                  months = forcats::as_factor(months),
                  months = forcats::fct_inorder(months)) |>
    duckdb::dbWriteTable(conn = dbconn,
                         name = "db/freq_month.db",
                         check_from = FALSE,
                         overwrite = TRUE)

# For the trip times.
dplyr::tbl(dbconn,
           tblPath_fltrd) |>
    dplyr::mutate(trip_time = round(trip_time,
                                    digits = 0)) |>
    dplyr::group_by(trip_time) |>
    dplyr::summarize(n = dplyr::n()) |>
    dplyr::arrange(trip_time) |>
    dplyr::collect() |>
    duckdb::dbWriteTable(conn = dbconn,
                         name = "db/freq_tripTime.db",
                         check_from = FALSE,
                         overwrite = TRUE)

# For the start station names
dplyr::tbl(dbconn,
           tblPath_fltrd) |>
    dplyr::select(start_station_name) |>
    dplyr::group_by(start_station_name) |>
    dplyr::summarize(n = dplyr::n()) |>
    dplyr::arrange(start_station_name) |>
    dplyr::collect() |>
    duckdb::dbWriteTable(conn = dbconn,
                         name = "db/freq_startNames.db",
                         check_from = FALSE,
                         overwrite = TRUE)


# For the station name pairs.
dplyr::tbl(dbconn,
           tblPath_fltrd) |>
    dplyr::select(start_station_name,
                  end_station_name) |>
    dplyr::group_by(start_station_name,
                    end_station_name) |>
    dplyr::summarize(n = dplyr::n()) |>
    dplyr::arrange(start_station_name) |>
    dplyr::collect() |>
    duckdb::dbWriteTable(conn = dbconn,
                         name = "db/freq_pairStations.db",
                         check_from = FALSE,
                         overwrite = TRUE)
```


```{r}
#| label: frequencyWrites_comparisons
#| code-summary: Second, writes all of the frequency comparison tables to the database.

# For the rideable type comparison
dplyr::tbl(dbconn,
           tblPath_fltrd,
           check_from = FALSE) |>
    dplyr::select(member_casual,
                  rideable_type) |>
    dplyr::group_by(rideable_type,
                    member_casual) |>
    dplyr::summarize(n = dplyr::n()) |>
    dplyr::collect() |>
    duckdb::dbWriteTable(conn = dbconn,
                         name = "db/freqCompare_rType.db",
                         overwrite = TRUE,
                         check_from = FALSE)

# For the miles comparison
dplyr::tbl(dbconn,
           tblPath_fltrd,
           check_from = FALSE) |>
    dplyr::select(member_casual,
                  miles) |>
    dplyr::collect() |>
    dplyr::mutate(miles = dplyr::case_when(
        miles >= 1 ~ round(miles,
                           digits = 0),
        miles < 1 ~ round(signif(miles, 3),
                          digits = 1)
    )) |>
    dplyr::group_by(miles,
                    member_casual) |>
    dplyr::summarize(n = dplyr::n()) |>
    dplyr::arrange(miles) |>
    duckdb::dbWriteTable(
        conn = dbconn,
        name = "db/freqCompare_miles.db",
        check_from = FALSE,
        overwrite = TRUE)

# For the mph comparison
dplyr::tbl(dbconn,
           tblPath_fltrd,
           check_from = FALSE) |>
    dplyr::select(member_casual,
                  mph) |>
    dplyr::mutate(mph = round(mph, digits = 0)) |>
    dplyr::group_by(mph,
                    member_casual) |>
    dplyr::summarize(n = dplyr::n()) |>
    dplyr::collect() |>
    dplyr::arrange(mph) |>
    duckdb::dbWriteTable(conn = dbconn,
                         name = "db/freqCompare_mph.db",
                         check_from = FALSE,
                         overwrite = TRUE)

# For the week days  comparison
dplyr::tbl(dbconn,
           tblPath_fltrd,
           check_from = FALSE) |>
    dplyr::select(member_casual,
                  started_at) |>
    dplyr::mutate(wkday = lubridate::wday(started_at)) |>
    dplyr::group_by(member_casual,
                    wkday) |>
    dplyr::summarize(n = dplyr::n()) |>
    dplyr::arrange(wkday) |>
    dplyr::collect() |>
    dplyr::mutate(wkday = c("Sun",
                            "Mon",
                            "Tue",
                            "Wed",
                            "Thu",
                            "Fri",
                            "Sat"),
                  wkday = forcats::as_factor(wkday),
                  wkday = forcats::fct_inorder(wkday)) |>
    duckdb::dbWriteTable(conn = dbconn,
                         name = "db/freqCompare_wkDay.db",
                         check_from = FALSE,
                         overwrite = TRUE)

# For the months comparison
dplyr::tbl(dbconn,
           tblPath_fltrd,
           check_from = FALSE) |>
    dplyr::select(member_casual,
                  started_at) |>
    dplyr::mutate(months = lubridate::month(started_at,
                                            label = FALSE,
                                            abbr = TRUE)) |>
    dplyr::group_by(member_casual,
                    months) |>
    dplyr::summarize(n = dplyr::n()) |>
    dplyr::collect() |>
    dplyr::arrange(months) |>
    dplyr::mutate(months = c(month.abb),
                  months = forcats::as_factor(months),
                  months = forcats::fct_inorder(months)) |>
    duckdb::dbWriteTable(conn = dbconn,
                         name = "db/freqCompare_month.db",
                         check_from = FALSE,
                         overwrite = TRUE)


# For the trip times comparison
dplyr::tbl(dbconn,
           tblPath_fltrd) |>
    dplyr::select(member_casual,
                  trip_time) |>
    dplyr::mutate(trip_time = round(trip_time,
                                    digits = 0)) |>
    dplyr::group_by(member_casual,
                    trip_time) |>
    dplyr::summarize(n = dplyr::n()) |>
    dplyr::arrange(trip_time,
                   member_casual) |>
    dplyr::collect() |>
    duckdb::dbWriteTable(conn = dbconn,
                         name = "db/freqCompare_tripTime.db",
                         check_from = FALSE,
                         overwrite = TRUE)

# For the start station names comparison
dplyr::tbl(dbconn,
           tblPath_fltrd) |>
    dplyr::select(member_casual,
                  start_station_name) |>
    dplyr::group_by(member_casual,
                    start_station_name) |>
    dplyr::summarize(n = dplyr::n()) |>
    dplyr::arrange(start_station_name,
                   member_casual) |>
    dplyr::collect() |>
    duckdb::dbWriteTable(conn = dbconn,
                         name = "db/freqCompare_startNames.db",
                         check_from = FALSE,
                         overwrite = TRUE)

# For the station name pairs comparison
dplyr::tbl(dbconn,
           tblPath_fltrd) |>
    dplyr::select(member_casual,
                  start_station_name,
                  end_station_name) |>
    dplyr::group_by(start_station_name,
                    end_station_name,
                    member_casual) |>
    dplyr::summarize(n = dplyr::n()) |>
    dplyr::arrange(start_station_name,
                   end_station_name,
                   member_casual) |>
    dplyr::collect() |>
    duckdb::dbWriteTable(conn = dbconn,
                         name = "db/freqCompare_pairStations.db",
                         check_from = FALSE,
                         overwrite = TRUE)

```
:::::
::::::
:::::::

::::::::::: {.d-flex .justify-content-center}
::::::::::: {.column-screen}
:::::::::: {.panel-tabset .shadow-sm}

## Memberships

::::: {.article}
::::: section
:::: {.d-flex .align-content-stretch}

### Membership Frequency

:::{.divBox}
:::

::: {.p-1 .align-self-center}
There are nearly twice as many trips taken by annual subscribers than by casual users. Maybe there is a relationship between how often a person uses Divvy Bikes service and whether they make the decision to subscribe to an annual membership plan. [See table](#tbl-totalmemberFrequency)
:::
::::
:::::

:::br 
:::

----

:::: {.d-flex .align-content-stretch}
::: {.p-3}
```{r}
#| label: tbl-totalmemberFrequency
#| tbl-cap: Total Member Frequency

dplyr::tbl(dbconn,
           "db/freq_member.db") |>
    gt::gt() |>
    gt::tab_header(
        title = "Subscriber Frequency",
        subtitle = "Annual and casual rider trip counts"
    ) |>
    gt::tab_options(
        table.background.color = 'transparent',
        table.font.color = "SeaShell",
        table_body.vlines.color = "gray20",
        table_body.hlines.color = "gray20",
        column_labels.hidden = TRUE)
```
:::
::: {.p-3}
```{r}
#| label: fig-totalmemberFrequency
#| fig-cap: Total Member Frequency

member_freqTbl <- dplyr::tbl(dbconn,
                             "db/freq_member.db") |>
    dplyr::collect()


member_freqTbl |>
    ggplot2::ggplot(mapping = ggplot2::aes(x = member_casual,
                                           y = n,
                                           fill = n)) +
    ggplot2::geom_col(show.legend = FALSE) +
    ggplot2::labs(title = "Membership Frequency",
                  subtitle = "Trips taken by annual subscribers vs non-subscribers") +
    ggplot2::scale_fill_distiller(palette = "YlOrRd") +
    ggplot2::theme(
        panel.background = ggplot2::element_rect(fill = "#222222",
                                                 color = NA),
        plot.background = ggplot2::element_rect(fill = "#222222",
                                                color = NA),
        text = ggplot2::element_text(color = "seashell"),
        panel.grid = ggplot2::element_blank(),
        axis.title.x = ggplot2::element_text(margin = grid::unit(c(5, 5, 5, 5), "mm")),
        axis.title.y = ggplot2::element_text(margin = grid::unit(c(5, 5, 5, 5), "mm")),
        axis.text.x = ggplot2::element_text(color = "Snow",
                                            margin = grid::unit(c(1, 1, 1, 1), "mm")),
        axis.text.y = ggplot2::element_text(color = "Snow",
                                            margin = grid::unit(c(2, 2, 2, 2), "mm")),
        axis.ticks = ggplot2::element_line(color = "LavenderBlush"),
        axis.ticks.y = ggplot2::element_blank(),
        panel.grid.major.y = ggplot2::element_line(color = "grey30")
    )
```
:::
::::
:::::

## Cycle Types

:::::: {.article}
::::: section
:::: {.d-flex .align-content-stretch}

:::{.p-1}
* ### Contents
    + [Count](#total_types_freq)
        - [Table](#tbl-ctypeTotal)
        - [Plot](#fig-ctypeTotal)
    + [Group Count](#group_types_freq)
        - [Table](#tbl-ctypeCompare)
        - [Plot](#fig-ctypeTotal)

:::

:::{.divBox}
:::

::: {.p-1 .align-self-center}
There are nearly twice as many trips taken with non-electric bikes as electric bikes. Perhaps, the associated health benefits with exercise would help explain higher non-electric bicycle use?
:::
::::
:::::

:::br 
:::

----

#### Total Frequency {#total_types_freq}

:::: {.d-flex .align-content-stretch}
::: {.p-3}
```{r}
#| label: tbl-ctypeTotal
#| tbl-cap: Cycle Type Total Frequency


dplyr::tbl(dbconn,
           "db/freq_rTypes.db") |>
     gt::gt() |>
        gt::tab_header(
            title = "Bicycle Type Frequency",
            subtitle = "Counts trips taken by cycle type"
        ) |>
        gt::tab_options(
            table.background.color = 'transparent',
            table.font.color = "SeaShell",
            table_body.vlines.color = "gray20",
            table_body.hlines.color = "gray20",
            column_labels.hidden = TRUE)
```
:::
::: {.p-3}
```{r}
#| label: fig-ctypeTotals
#| fig-cap: Cycle Type Total Frequency 

ridetype_freqTbl <- dplyr::tbl(dbconn,
                             "db/freq_rTypes.db") |>
    dplyr::collect()

ridetype_freqTbl |>
    ggplot2::ggplot(mapping = ggplot2::aes(x = rideable_type,
                                           y = n,
                                           fill = n)) +
    ggplot2::geom_col(show.legend = FALSE) +
    ggplot2::scale_fill_distiller(palette = "YlOrRd") +
    ggplot2::labs(title = "Cycle Type Frequency",
                  subtitle = "Trips taken per cycle type") +
    ggplot2::theme(
        panel.background = ggplot2::element_rect(fill = "#222222",
                                                 color = NA),
        plot.background = ggplot2::element_rect(fill = "#222222",
                                                color = NA),
        text = ggplot2::element_text(color = "seashell"),
        panel.grid = ggplot2::element_blank(),
        axis.title.x = ggplot2::element_text(margin = grid::unit(c(5, 5, 5, 5), "mm")),
        axis.title.y = ggplot2::element_text(margin = grid::unit(c(5, 5, 5, 5), "mm")),
        axis.text.x = ggplot2::element_text(color = "Snow",
                                            margin = grid::unit(c(1, 1, 1, 1), "mm")),
        axis.text.y = ggplot2::element_text(color = "Snow",
                                            margin = grid::unit(c(2, 2, 2, 2), "mm")),
        axis.ticks = ggplot2::element_line(color = "LavenderBlush"),
        axis.ticks.y = ggplot2::element_blank(),
        panel.grid.major.y = ggplot2::element_line(color = "grey30")
    )
```
:::
::::

----

#### Group Frequency {#group_types_freq}

:::: {.d-flex .align-content-stretch}
::: {.p-3}
```{r}
#| label: tbl-ctypeCompare
#| tbl-cap: Cycle Type Group Frequency

dplyr::tbl(dbconn,
           "db/freqCompare_rType.db") |>
     gt::gt(groupname_col = "rideable_type",
            row_group_as_column = TRUE) |>
        gt::tab_header(
            title = "Bicycle Type to Membership Frequency",
            subtitle = "Grouped by sub. status"
        ) |>
        gt::tab_options(
            table.background.color = 'transparent',
            table.font.color = "SeaShell",
            table_body.vlines.color = "gray20",
            table_body.hlines.color = "gray20",
            column_labels.hidden = TRUE)
```
:::
::: {.p-3}
```{r}
#| label: fig-ctypeCompare
#| fig-cap: Cycle Type Group Frequency

dplyr::tbl(dbconn,
           "db/freqCompare_rType.db") |>
    ggplot2::ggplot(mapping = ggplot2::aes(x = rideable_type,
                                           y = n,
                                           fill = member_casual)) +
    ggplot2::geom_col(show.legend = TRUE,
                      position = 'dodge') +
    ggplot2::scale_fill_brewer(palette = "Paired",
                               name = "Subscriber Status") +
    ggplot2::labs(title = "Cycle Type to Membership Frequency",
                  subtitle = "Compare trips taken by cycle type to membership status") +
    ggplot2::theme(
        panel.background = ggplot2::element_rect(fill = "#222222",
                                                 color = NA),
        plot.background = ggplot2::element_rect(fill = "#222222",
                                                color = NA),
        text = ggplot2::element_text(color = "seashell"),
        panel.grid = ggplot2::element_blank(),
        axis.title.x = ggplot2::element_text(margin = grid::unit(c(5, 5, 5, 5), "mm")),
        axis.title.y = ggplot2::element_text(margin = grid::unit(c(5, 5, 5, 5), "mm")),
        axis.text.x = ggplot2::element_text(color = "Snow",
                                            margin = grid::unit(c(1, 1, 1, 1), "mm")),
        axis.text.y = ggplot2::element_text(color = "Snow",
                                            margin = grid::unit(c(2, 2, 2, 2), "mm")),
        axis.ticks = ggplot2::element_line(color = "LavenderBlush"),
        axis.ticks.y = ggplot2::element_blank(),
        panel.grid.major.y = ggplot2::element_line(color = "grey30"),
        legend.background = ggplot2::element_rect(fill = "#222222")
        )
```
:::
::::
:::::

## Month

:::::: {.article}

::::: section
:::: {.d-flex .align-content-stretch}

* ### Contents
    + [Total Frequency](#total_month_freq)
        - [Table](#tbl-monthTotals)
        - [Plot](#fig-monthTotals)
    + [Group Frequency](#group_month_freq)
        - [Table](#tbl-monthGroup)
        - [Plot](#fig-monthGroup)

:::{.divBox}
:::

::: {.p-1 .align-self-center}
Trips by month does differ substantially between certain months. late Spring , Summer, to early Fall months in Chicago is when we see the largest increase in ridership. Most likely the ambient temperature is a major contributor for the seasonal patterns in trips taken. 
:::

::::
:::::

:::br
:::

----

#### Total Frequency {#total_month_freq}

:::: {.d-flex .align-content-stretch}
:::{.p-3}
```{r}
#| label: tbl-monthTotals
#| tbl-cap: Month Total Frequency

dplyr::tbl(dbconn,
           "db/freq_month.db") |>
    gt::gt() |>
    gt::tab_header(
        title = "Monthly Trips Frequency",
        subtitle = "Tallies trips taken by month") |>
    gt::tab_options(
        table.background.color = 'transparent',
        table.font.color = "SeaShell",
        table_body.vlines.color = "gray20",
        table_body.hlines.color = "gray20",
        column_labels.hidden = TRUE
    )
```
:::
::: {.p-3}
```{r}
#| label: fig-monthTotals
#| fig-cap: Month Total Frequency


monthlyTable <- dplyr::tbl(dbconn,
           "db/freq_month.db") |>
    dplyr::collect()
    
monthlyTable |>
    ggplot2::ggplot(mapping = ggplot2::aes(x = months,
                                           y = n,
                                           fill = n)) +
    ggplot2::geom_col(show.legend = FALSE) +
    ggplot2::labs(title = "Monthly Trip Frequency",
                  subtitle = "A total count of trips taken by month") +
    ggplot2::scale_fill_distiller(palette = "YlOrRd") +
    ggplot2::theme(
        panel.background = ggplot2::element_rect(fill = "#222222",
                                                 color = NA),
        plot.background = ggplot2::element_rect(fill = "#222222",
                                                color = NA),
        text = ggplot2::element_text(color = "seashell"),
        panel.grid = ggplot2::element_blank(),
        axis.title.x = ggplot2::element_text(margin = grid::unit(c(5, 5, 5, 5), "mm")),
        axis.title.y = ggplot2::element_text(margin = grid::unit(c(5, 5, 5, 5), "mm")),
        axis.text.x = ggplot2::element_text(color = "Snow",
                                            margin = grid::unit(c(1, 1, 1, 1), "mm")),
        axis.text.y = ggplot2::element_text(color = "Snow",
                                            margin = grid::unit(c(2, 2, 2, 2), "mm")),
        axis.ticks = ggplot2::element_line(color = "LavenderBlush"),
        axis.ticks.y = ggplot2::element_blank(),
        panel.grid.major.y = ggplot2::element_line(color = "grey30")
    )
```
:::
::::

----

#### Group Frequency {#group_month_frequency}

:::: {.d-flex .align-content-stretch}
:::{.p-3}
```{r}
#| label: tbl-monthCompare
#| tbl-cap: Month Group Frequency
#| cap-location: margin

dplyr::tbl(dbconn,
           "db/freqCompare_month.db") |>
     gt::gt(groupname_col = "months",
            row_group_as_column = TRUE) |>
        gt::tab_header(
            title = "Month to Membership Frequency",
            subtitle = "Grouped by sub status"
        ) |>
        gt::tab_options(
            table.background.color = 'transparent',
            table.font.color = "SeaShell",
            table_body.vlines.color = "gray20",
            table_body.hlines.color = "gray20",
            column_labels.hidden = TRUE)
```
:::
::: {.p-3}
```{r}
#| label: fig-monthCompare
#| fig-cap: Month Group Frequency


dplyr::tbl(dbconn,
           "db/freqCompare_month.db") |>
    ggplot2::ggplot(mapping = ggplot2::aes(x = months,
                                           y = n,
                                           fill = member_casual)) +
    ggplot2::geom_col(show.legend = TRUE,
                      position = 'dodge') +
    ggplot2::scale_fill_brewer(palette = "Paired",
                               name = "Subscriber Status") +
    ggplot2::labs( title = "Month to Membership Frequency",
            subtitle = "Grouped by sub status") +
    ggplot2::theme(
        panel.background = ggplot2::element_rect(fill = "#222222",
                                                 color = NA),
        plot.background = ggplot2::element_rect(fill = "#222222",
                                                color = NA),
        text = ggplot2::element_text(color = "seashell"),
        panel.grid = ggplot2::element_blank(),
        axis.title.x = ggplot2::element_text(margin = grid::unit(c(5, 5, 5, 5), "mm")),
        axis.title.y = ggplot2::element_text(margin = grid::unit(c(5, 5, 5, 5), "mm")),
        axis.text.x = ggplot2::element_text(color = "Snow",
                                            margin = grid::unit(c(1, 1, 1, 1), "mm")),
        axis.text.y = ggplot2::element_text(color = "Snow",
                                            margin = grid::unit(c(2, 2, 2, 2), "mm")),
        axis.ticks = ggplot2::element_line(color = "LavenderBlush"),
        axis.ticks.y = ggplot2::element_blank(),
        panel.grid.major.y = ggplot2::element_line(color = "grey30"),
        legend.background = ggplot2::element_rect(fill = "#222222")
        )

```
:::
::::
:::::

## Day of Week 

:::::: {.article}

:::::: section
::::: {.d-flex .align-content-stretch}

::: {.p-1}
* ### Contents
    + [Total Frequency](#total_day_freq)
        - [Table](#tbl-wkdayTotals)
        - [Plot](#fig-wkdayTotals)
    + [Group Frequency](#group_day_freq)
        - [Table](#tbl-wkdayCompare)
        - [Plot](#fig-wkdayCompare)

:::

:::{.divBox}
:::

:::: {.p-1 .align-self-center}
There is a slight reduction in trips taken on Sundays and Mondays. This could be explained by the fact that most trips are taken by annual subscribers, possibly because they are commuting to work and such. So, much less people will be biking to work on Sundays. Taking 3-day weekends is common in the workplace, where most would likely opt to use up their sick/vacation days on Monday. That might explain the down tick in trips taken on Mondays. Also, those who are working Tuesdays-Saturdays could be taking Sunday and Mondays off.
::::

:::::
::::::

:::br
:::

----

#### Total Frequency {#total_day_freq}

:::: {.d-flex .align-content-stretch}
:::{.p-3}
```{r}
#| label: tbl-wkdayTotals
#| tbl-cap: Weekday Total Frequency


dplyr::tbl(dbconn,
           "db/freq_wkday.db") |>
    gt::gt() |>
    gt::tab_header(
        title = "Weekday Trip Frequency",
        subtitle = "Tallies trips taken by the day of the week") |>
    gt::tab_options(
        table.background.color = 'transparent',
        table.font.color = "SeaShell",
        table_body.vlines.color = "gray20",
        table_body.hlines.color = "gray20",
        column_labels.hidden = TRUE
        )
```
:::

::: {.p-3}
```{r}
#| label: fig-wkdayTotals
#| fig-cap: Weekday Totals Frequency

weekdayTable <- dplyr::tbl(dbconn,
           "db/freq_wkday.db") |>
    dplyr::collect()
    
weekdayPlot <- weekdayTable |>
    ggplot2::ggplot(mapping = ggplot2::aes(x = wkday,
                                           y = n,
                                           fill = n)) +
    ggplot2::coord_cartesian(ylim = c(4 * 10 ^ 5, NA)) +
    ggplot2::geom_col(show.legend = FALSE) +
    ggplot2::labs(title = "Weekday Trip Frequency",
                  subtitle = "Trips by day of week") +
    ggplot2::scale_fill_distiller(palette = "YlOrRd") +
    ggplot2::theme(
        panel.background = ggplot2::element_rect(fill = "#222222",
                                                 color = NA),
        plot.background = ggplot2::element_rect(fill = "#222222",
                                                color = NA),
        text = ggplot2::element_text(color = "seashell"),
        panel.grid = ggplot2::element_blank(),
        axis.title.x = ggplot2::element_text(margin = grid::unit(c(5, 5, 5, 5), "mm")),
        axis.title.y = ggplot2::element_text(margin = grid::unit(c(5, 5, 5, 5), "mm")),
        axis.text.x = ggplot2::element_text(color = "Snow",
                                            margin = grid::unit(c(1, 1, 1, 1), "mm")),
        axis.text.y = ggplot2::element_text(color = "Snow",
                                            margin = grid::unit(c(2, 2, 2, 2), "mm")),
        axis.ticks = ggplot2::element_line(color = "LavenderBlush"),
        axis.ticks.y = ggplot2::element_blank(),
        panel.grid.major.y = ggplot2::element_line(color = "grey30")
    )

weekdayPlot
```
:::
::::

----

#### Group Frequency {#group_day_freq}

:::: {.d-flex .align-content-stretch}
:::{.p-3}
```{r}
#| label: tbl-wkdayCompare
#| tbl-cap: Weekday Group Frequency

dplyr::tbl(dbconn,
           "db/freqCompare_wkday.db") |>
     gt::gt(groupname_col = "wkday",
            row_group_as_column = TRUE) |>
        gt::tab_header(
            title = "Day to Membership Frequency",
            subtitle = "Grouped by sub status"
        ) |>
        gt::tab_options(
            table.background.color = 'transparent',
            table.font.color = "SeaShell",
            table_body.vlines.color = "gray20",
            table_body.hlines.color = "gray20",
            column_labels.hidden = TRUE)
```
:::
::: {.p-3}
```{r}
#| label: fig-wkdayCompare
#| fig-cap: Weekday Group Frequency

dplyr::tbl(dbconn,
           "db/freqCompare_wkday.db") |>
    ggplot2::ggplot(mapping = ggplot2::aes(x = wkday,
                                           y = n,
                                           fill = member_casual)) +
    ggplot2::geom_col(show.legend = TRUE,
                      position = 'dodge') +
    ggplot2::scale_fill_brewer(palette = "Paired",
                               name = "Subscriber Status") +
    ggplot2::labs( title = "Weekday to Membership Frequency",
            subtitle = "Grouped by sub status") +
    ggplot2::theme(
        panel.background = ggplot2::element_rect(fill = "#222222",
                                                 color = NA),
        plot.background = ggplot2::element_rect(fill = "#222222",
                                                color = NA),
        text = ggplot2::element_text(color = "seashell"),
        panel.grid = ggplot2::element_blank(),
        axis.title.x = ggplot2::element_text(margin = grid::unit(c(5, 5, 5, 5), "mm")),
        axis.title.y = ggplot2::element_text(margin = grid::unit(c(5, 5, 5, 5), "mm")),
        axis.text.x = ggplot2::element_text(color = "Snow",
                                            margin = grid::unit(c(1, 1, 1, 1), "mm")),
        axis.text.y = ggplot2::element_text(color = "Snow",
                                            margin = grid::unit(c(2, 2, 2, 2), "mm")),
        axis.ticks = ggplot2::element_line(color = "LavenderBlush"),
        axis.ticks.y = ggplot2::element_blank(),
        panel.grid.major.y = ggplot2::element_line(color = "grey30"),
        legend.background = ggplot2::element_rect(fill = "#222222")
        )
```
:::
::::
:::::

## Miles

::::: {.article}
:::::: section
::::: {.d-flex .align-content-stretch}

::::{.p-1}
* ### Contents
    + [Total Frequency](#total_miles_freq)
        - [Table](#tbl-milesTotals)
        - [Plot](#fig-milesTotals)
    + [Grouped Frequency](#group_miles_freq)
        - [Table](#tbl-milesCompare)
        - [Plot](#fig-milesCompare)

::::

::::{.divBox}
::::

:::: {.p-1 .align-self-center}
This shows that around 0.3 to 3 miles is the distance traveled on most trips taken. The fact that casual bicycles are used more often perhaps makes a little more sense considering that people are not traveling long distances.
::::

:::::
::::::

:::br
:::

----

#### Total Frequency {#total_miles_freq}

:::: {.d-flex .align-content-stretch}
:::{.p-3}
```{r}
#| label: tbl-milesTotals
#| tbl-cap: Miles Total Frequency

dplyr::tbl(dbconn,
           "db/freq_miles.db") |>
    dplyr::arrange(desc(n)) |>
    head(n = 10) |>
    gt::gt() |>
        gt::tab_header(
            title = "Trip Distance Frequency",
            subtitle = "Distance is measured in miles"
        ) |>
        gt::tab_options(
            table.background.color = 'transparent',
            table.font.color = "SeaShell",
            table_body.vlines.color = "gray20",
            table_body.hlines.color = "gray20"
        )
```
:::
::: {.p-3}
```{r}
#| label: fig-milesTotals
#| fig-cap: Miles Total Frequency

milesTable <- dplyr::tbl(dbconn,
           "db/freq_miles.db") |>
    dplyr::collect() |>
    dplyr::mutate(n = n/1000) |>
    dplyr::rename("Trips (in thousands)" = n,
                  "Miles" = miles)

milesPlot <- milesTable |>
    ggplot2::ggplot(mapping = ggplot2::aes(x = Miles,
                                           y = `Trips (in thousands)`,
                                           color = `Trips (in thousands)`)) +
    ggplot2::geom_point(show.legend = FALSE,
                        size = 2) +
    #ggplot2::scale_size_area() +
    ggplot2::scale_color_distiller(palette = "YlOrRd") +

    ggplot2::labs(title = "Trip Distance Frequency",
                  subtitle = "Measured in miles") +
    ggplot2::theme(
        panel.background = ggplot2::element_rect(fill = "#222222",
                                                 color = NA),
        plot.background = ggplot2::element_rect(fill = "#222222",
                                                color = NA),
        text = ggplot2::element_text(color = "seashell"),
        panel.grid = ggplot2::element_blank(),
        axis.title.x = ggplot2::element_text(margin = grid::unit(c(5, 5, 5, 5), "mm")),
        axis.title.y = ggplot2::element_text(margin = grid::unit(c(5, 5, 5, 5), "mm")),
        axis.text.x = ggplot2::element_text(color = "Snow",
                                            margin = grid::unit(c(1, 1, 1, 1), "mm")),
        axis.text.y = ggplot2::element_text(color = "Snow",
                                            margin = grid::unit(c(2, 2, 2, 2), "mm")),
        axis.ticks = ggplot2::element_line(color = "LavenderBlush"),
        axis.ticks.y = ggplot2::element_blank(),
        panel.grid.major.y = ggplot2::element_line(color = "grey30") 
        )
        
milesPlot
```
:::
::::

----

#### Group Frequency {#group_miles_freq}

:::: {.d-flex .align-content-stretch}
:::{.p-3}
```{r}
#| label: tbl-milesCompare
#| tbl-cap: Miles Group Frequency

dplyr::tbl(dbconn,
           "db/freqCompare_miles.db") |>
     gt::gt(groupname_col = "miles",
            row_group_as_column = TRUE) |>
        gt::tab_header(
            title = "Miles to Membership Frequency",
            subtitle = "Grouped by sub status"
        ) |>
        gt::tab_options(
            table.background.color = 'transparent',
            table.font.color = "SeaShell",
            table_body.vlines.color = "gray20",
            table_body.hlines.color = "gray20",
            column_labels.hidden = TRUE)
```
:::
::: {.p-3}
```{r}
#| label: fig-milesCompare
#| fig-cap: Miles Group Frequency


dplyr::tbl(dbconn,
           "db/freqCompare_miles.db") |>
    ggplot2::ggplot(mapping = ggplot2::aes(x = miles,
                                           y = n,
                                           fill = member_casual)) +
    ggplot2::geom_area(show.legend = TRUE,
                      #position = 'dodge'
                      ) +
    ggplot2::scale_color_brewer(palette = "Paired",
                               name = "Subscriber Status") +
    ggplot2::labs( title = "Miles to Membership Frequency",
            subtitle = "Grouped by sub status") +
    ggplot2::theme(
        panel.background = ggplot2::element_rect(fill = "#222222",
                                                 color = NA),
        plot.background = ggplot2::element_rect(fill = "#222222",
                                                color = NA),
        text = ggplot2::element_text(color = "seashell"),
        panel.grid = ggplot2::element_blank(),
        axis.title.x = ggplot2::element_text(margin = grid::unit(c(5, 5, 5, 5), "mm")),
        axis.title.y = ggplot2::element_text(margin = grid::unit(c(5, 5, 5, 5), "mm")),
        axis.text.x = ggplot2::element_text(color = "Snow",
                                            margin = grid::unit(c(1, 1, 1, 1), "mm")),
        axis.text.y = ggplot2::element_text(color = "Snow",
                                            margin = grid::unit(c(2, 2, 2, 2), "mm")),
        axis.ticks = ggplot2::element_line(color = "LavenderBlush"),
        axis.ticks.y = ggplot2::element_blank(),
        panel.grid.major.y = ggplot2::element_line(color = "grey30"),
        legend.background = ggplot2::element_rect(fill = "#222222")
        )
```
:::
::::
:::::

## Mph

::::: {.article}

:::::: section
::::: {.d-flex .align-content-stretch}

:::: {.p-1}
* ### Contents
    + [Total Frequency](#total_mph_freq)
        - [Table](#tbl-mphTotals)
        - [Plot](#fig-mphTotals)
    + [Grouped Frequency](#group_mph_freq)
        - [Table](#tbl-mphCompare)
        - [Plot](#fig-mphCompare)

::::

::::{.divBox}
::::

:::: {.p-1 .align-self-center}
The most common overall mph for trips fall in between 2-11 mph. This is what we might expect for city travel.
::::

:::::
::::::

:::br
:::

----

#### Total Frequency {#total_mph_freq}

:::: {.d-flex .align-content-stretch}
:::{.p-3}
```{r}
#| label: tbl-mphTotals
#| tbl-cap: Mph Total Frequency

dplyr::tbl(dbconn,
           "db/freq_mph.db") |>
    gt::gt() |>
    gt::tab_header(
        title = "Mean Speed Frequency",
        subtitle = "Calculated average speed over the duration of the trip") |>
    gt::tab_options(
        table.background.color = 'transparent',
        table.font.color = "SeaShell",
        table_body.vlines.color = "gray20",
        table_body.hlines.color = "gray20",
        column_labels.hidden = TRUE
        )
```
:::
::: {.p-3}
```{r}
#| label: fig-mphTotals
#| fig-cap: Mph Total Frequency


mphTable <- dplyr::tbl(dbconn,
                       "db/freq_mph.db") |>
    dplyr::collect()

mphPlot <- mphTable |>
    ggplot2::ggplot(mapping = ggplot2::aes(x = mph,
                                           y = n,
                                           color = n)) +
    ggplot2::geom_point(show.legend = FALSE) +
    ggplot2::labs(title = "Mean Speed Frequency",
                  subtitle = "Calculated average speed over the duration of the trip") +
    ggplot2::scale_color_distiller(palette = "YlOrRd") +
    ggplot2::theme(
        panel.background = ggplot2::element_rect(fill = "#222222",
                                                 color = NA),
        plot.background = ggplot2::element_rect(fill = "#222222",
                                                color = NA),
        text = ggplot2::element_text(color = "seashell"),
        panel.grid = ggplot2::element_blank(),
        axis.title.x = ggplot2::element_text(margin = grid::unit(c(5, 5, 5, 5), "mm")),
        axis.title.y = ggplot2::element_text(margin = grid::unit(c(5, 5, 5, 5), "mm")),
        axis.text.x = ggplot2::element_text(color = "Snow",
                                            margin = grid::unit(c(1, 1, 1, 1), "mm")),
        axis.text.y = ggplot2::element_text(color = "Snow",
                                            margin = grid::unit(c(2, 2, 2, 2), "mm")),
        axis.ticks = ggplot2::element_line(color = "LavenderBlush"),
        axis.ticks.y = ggplot2::element_blank(),
        panel.grid.major.y = ggplot2::element_line(color = "grey30")
    )

mphPlot
```
:::
::::

----

#### Group Frequency {#group_mph_freq}

:::: {.d-flex .align-content-stretch}
:::{.p-3}
```{r}
#| label: tbl-mphCompare
#| tbl-cap: Mph Group Frequency

dplyr::tbl(dbconn,
           "db/freqCompare_mph.db") |>
     gt::gt(groupname_col = "mph",
            row_group_as_column = TRUE) |>
        gt::tab_header(
            title = "Mph to Membership Frequency",
            subtitle = "Grouped by sub status"
        ) |>
        gt::tab_options(
            table.background.color = 'transparent',
            table.font.color = "SeaShell",
            table_body.vlines.color = "gray20",
            table_body.hlines.color = "gray20",
            column_labels.hidden = TRUE)


```
:::
::: {.p-3}
```{r}
#| label: fig-mphCompare
#| fig-cap: Mph Group Frequency

dplyr::tbl(dbconn,
           "db/freqCompare_mph.db") |>
    ggplot2::ggplot(mapping = ggplot2::aes(x = mph,
                                           y = n,
                                           fill = member_casual)) +
    ggplot2::geom_area(show.legend = TRUE,
                      #position = 'dodge'
                      ) +
    ggplot2::scale_color_brewer(palette = "Paired",
                               name = "Subscriber Status") +
    ggplot2::labs( title = "Mph to Membership Frequency",
            subtitle = "Grouped by sub status") +
    ggplot2::theme(
        panel.background = ggplot2::element_rect(fill = "#222222",
                                                 color = NA),
        plot.background = ggplot2::element_rect(fill = "#222222",
                                                color = NA),
        text = ggplot2::element_text(color = "seashell"),
        panel.grid = ggplot2::element_blank(),
        axis.title.x = ggplot2::element_text(margin = grid::unit(c(5, 5, 5, 5), "mm")),
        axis.title.y = ggplot2::element_text(margin = grid::unit(c(5, 5, 5, 5), "mm")),
        axis.text.x = ggplot2::element_text(color = "Snow",
                                            margin = grid::unit(c(1, 1, 1, 1), "mm")),
        axis.text.y = ggplot2::element_text(color = "Snow",
                                            margin = grid::unit(c(2, 2, 2, 2), "mm")),
        axis.ticks = ggplot2::element_line(color = "LavenderBlush"),
        axis.ticks.y = ggplot2::element_blank(),
        panel.grid.major.y = ggplot2::element_line(color = "grey30"),
        legend.background = ggplot2::element_rect(fill = "#222222")
        )
```
:::
::::
:::::

## Trip-Times

:::::: {.article}
:::::: section
::::: {.d-flex .align-content-stretch}

:::: {.p-1}
* ### Contents
    + [Total Frequency](#total_tripTime_freq)
        - [Table](#tbl-triptimeTotals)
        - [Plot](#fig-triptimeTotals)
    + [Grouped Frequency](#group_tripTime_freq)
        - [Table](#tbl-triptimeCompare)
        - [Plot](#fig-triptimeCompare)

::::

:::{.divBox}
:::

:::: {.p-1 .align-self-center}
The time riders are usually spending on these trips lies between 5 to 15 minutes.
::::

:::::
::::::

:::br
:::

----

#### Total Frequency {#total_tripTime_freq}

:::: {.d-flex .align-content-stretch}
:::{.p-3}
```{r}
#| label: tbl-triptimeTotals
#| tbl-cap: Trip-Time Totals

dplyr::tbl(dbconn,
           "db/freq_tripTime.db") |>
    dplyr::collect() |>
    dplyr::arrange(desc(n)) |>
    head(n = 20) |>
    gt::gt() |>
    gt::tab_header(
        title = "Trip Duration Frequency",
        subtitle = "Tallies the duration of time people rent cycles for") |>
    gt::tab_options(
        table.background.color = 'transparent',
        table.font.color = "SeaShell",
        table_body.vlines.color = "gray20",
        table_body.hlines.color = "gray20",
        column_labels.hidden = TRUE)
```
:::
::: {.p-3}
```{r}
#| label: fig-triptimeTotal
#| fig-cap: Trip-Time Totals

tripTimeTable <- dplyr::tbl(dbconn,
                            "db/freq_tripTime.db") |>
    dplyr::collect()

tripTimePlot <- tripTimeTable |>
    ggplot2::ggplot(mapping = ggplot2::aes(x = trip_time,
                                           y = n,
                                           fill = n)) +
    ggplot2::geom_col(show.legend = FALSE) +
    ggplot2::labs(title = "Trip Duration Frequency",
                  subtitle = "Tallies the duration of time people rent cycles for") +
    ggplot2::scale_fill_distiller(palette = "YlOrRd") +
    ggplot2::xlim(NA, 100) +
    ggplot2::theme(
        panel.background = ggplot2::element_rect(fill = "#222222",
                                                 color = NA),
        plot.background = ggplot2::element_rect(fill = "#222222",
                                                color = NA),
        text = ggplot2::element_text(color = "seashell"),
        panel.grid = ggplot2::element_blank(),
        axis.title.x = ggplot2::element_text(margin = grid::unit(c(5, 5, 5, 5), "mm")),
        axis.title.y = ggplot2::element_text(margin = grid::unit(c(5, 5, 5, 5), "mm")),
        axis.text.x = ggplot2::element_text(color = "Snow",
                                            margin = grid::unit(c(1, 1, 1, 1), "mm")),
        axis.text.y = ggplot2::element_text(color = "Snow",
                                            margin = grid::unit(c(2, 2, 2, 2), "mm")),
        axis.ticks = ggplot2::element_line(color = "LavenderBlush"),
        axis.ticks.y = ggplot2::element_blank(),
        panel.grid.major.y = ggplot2::element_line(color = "grey30")
    )

tripTimePlot
```
:::
::::

----

#### Group Frequency {#group_tripTime_freq}

:::: {.d-flex .align-content-stretch}
:::{.p-3}
```{r}
#| label: tbl-triptimeCompare
#| tbl-cap: Trip Time Comparison

dplyr::tbl(dbconn,
           "db/freqCompare_tripTime.db") |>
    dplyr::collect() |>
    dplyr::arrange(desc(n)) |>
    head(n = 20) |>
    gt::gt(groupname_col = "trip_time",
           row_group_as_column = TRUE) |>
    gt::tab_header(title = "Trip-Time to Membership Frequency",
                   subtitle = "Grouped by sub status") |>
    gt::tab_options(
        table.background.color = 'transparent',
        table.font.color = "SeaShell",
        table_body.vlines.color = "gray20",
        table_body.hlines.color = "gray20",
        column_labels.hidden = TRUE
    )

```
:::
::: {.p-3}
```{r}
#| label: fig-triptimeFrequency
#| fig-cap: Trip-Time Group Frequency 

dplyr::tbl(dbconn,
           "db/freqCompare_tripTime.db") |>
    ggplot2::ggplot(mapping = ggplot2::aes(x = trip_time,
                                           y = n,
                                           fill = member_casual)) +
    ggplot2::geom_area(show.legend = TRUE) +
    ggplot2::xlim(NA, 100) +
    ggplot2::scale_color_brewer(palette = "Paired",
                               name = "Subscriber Status") +
    ggplot2::labs( title = "Trip-Time to Membership Frequency",
            subtitle = "Grouped by sub status") +
    ggplot2::theme(
        panel.background = ggplot2::element_rect(fill = "#222222",
                                                 color = NA),
        plot.background = ggplot2::element_rect(fill = "#222222",
                                                color = NA),
        text = ggplot2::element_text(color = "seashell"),
        panel.grid = ggplot2::element_blank(),
        axis.title.x = ggplot2::element_text(margin = grid::unit(c(5, 5, 5, 5), "mm")),
        axis.title.y = ggplot2::element_text(margin = grid::unit(c(5, 5, 5, 5), "mm")),
        axis.text.x = ggplot2::element_text(color = "Snow",
                                            margin = grid::unit(c(1, 1, 1, 1), "mm")),
        axis.text.y = ggplot2::element_text(color = "Snow",
                                            margin = grid::unit(c(2, 2, 2, 2), "mm")),
        axis.ticks = ggplot2::element_line(color = "LavenderBlush"),
        axis.ticks.y = ggplot2::element_blank(),
        panel.grid.major.y = ggplot2::element_line(color = "grey30"),
        legend.background = ggplot2::element_rect(fill = "#222222")
        )
```
:::
::::
:::::
:::::::
::::::::
::::::::

:::: {.d-flex .justify-content-center}
::: {.btn .btn-secondary type="button" data-bs-toggle="offcanvas" data-bs-target="#offcanvas10" aria-controls="offcanvas"}
```{=html}
<i class="bi bi-code-slash" style="font-size: .75em; color: cornflowerblue;"></i>
```
:::
::::


# Trip Network

:::::: {#offcanvas13 .offcanvas .offcanvas-start tabindex="-1" aria-labelledby="offcanvas" style="width: auto"}
::::: offcanvas-header
:::: {.h5 .offcanvas-title}
Stepping Through the Code
::::

:::: {.btn-close type="button" data-bs-dismiss="offcanvas" ariaLabel="Close"}
::::
:::::

::::: offcanvas-body
:::: flex-code
```{r}
#| label: createFlows dataframe
#| code-summary: First, creates the frequency of trips taken to and from pairs of stations. We are only going to look deeper into the top 50 most traveled pairs.

flowData <- dplyr::tbl(dbconn,
                       tblPath_fltrd) |>
    dplyr::select(start_station_name,
                  end_station_name) |>
    dplyr::group_by(start_station_name,
                    end_station_name) |>
    dplyr::summarize(n = n()) |>
    dplyr::ungroup() |>
    dplyr::arrange(desc(n)) |>
    dplyr::rename("from_station" = start_station_name,
                  "to_station" = end_station_name) |>
    dplyr::collect() |>
    dplyr::slice_head(n = 50)
```

```{r}
#| label: location stats
#| code-summary: Second, we need statistics but also to combine the statistics for every unique station name. 

locationData <- dplyr::tbl(dbconn,
                            tblPath_fltrd) |>
    dplyr::select(start_station_name,
                  end_station_name,
                  started_at,
                  ended_at,
                  trip_time) |>
    dplyr::group_by(start_station_name,
                    end_station_name
                ) |>
    dplyr::mutate("trip_time" = round(trip_time,
                                      digits = 0)) |>
    dplyr::summarize(
        "trip_count" = dplyr::n(),
        "first_date" = min(started_at),
        "last_date" = max(ended_at),
        "avg_trip_time" = mean(trip_time)
    ) |>
    dplyr::ungroup() |>
    dplyr::rename("from_station" = start_station_name,
                  "to_station" = end_station_name
               ) |>
    dplyr::arrange(desc(trip_count)) |>
    dplyr::collect()

# Need to combine all names to single column and recalculate 
# or retain other stats.
locationData_pivoted <- locationData |>
    tidyr::pivot_longer(cols = 1:2, 
                        values_to = "allNames") |>
    dplyr::group_by(allNames) |>
    dplyr::summarize("trips_toAndfrom" = sum(trip_count),
                     first_date = min(first_date),
                     last_date = max(last_date),
                     avg_trip_time = mean(avg_trip_time)
                     ) |>
    dplyr::mutate(avg_trip_time = round(avg_trip_time,
                                      digits = 0)) |>
    dplyr::arrange(trips_toAndfrom)

```

```{r}
#| label: MakeEpiflows
#| code-summary: Third, creates epiflow objects, which take in a pair of dataframes and creates the flows between them. 

# for all the pairs
ef_test <- epiflows::make_epiflows(flows = flowData,
                                   locations = locationData_pivoted,
                                   duration_stay = "avg_trip_time",
                                   num_cases = "trips_toAndfrom")
```
::::
:::::
::::::

:::::: {#offcanvas14 .offcanvas .offcanvas-end tabindex="-1" aria-labelledby="offcanvas" style="width: auto"}
::::: offcanvas-header
:::: {.h5 .offcanvas-title}
Tables
::::

:::: {.btn-close type="button" data-bs-dismiss="offcanvas" ariaLabel="Close"}
::::
:::::

::::: offcanvas-body
:::: flex-code
```{r}
#| label: summaryFlowData
#| code-summary: First, just a quick view of the flow data table we made earlier.
#| title: Flow Data View

flowData
```

```{r}
#| label: pivotedLocations
#| code-summary: Second, another quick view, but for thethe location data we pivoted earlier.
#| title: Pivoted Location Data

locationData_pivoted |>
    dplyr::arrange(desc(trips_toAndfrom))
```
::::
:::::
::::::

:::: br
::::

:::: {.column-screen-inset}

# Epiflow Diagram

::: {.article style="color: Black"}
```{r}
#| label: fig-epiflowNetwork
#| fig-cap: EpiFlow Network
#| echo: false

epiflows::vis_epiflows(ef_test)
```
:::
::::


::::: {.d-flex .justify-content-center}
:::: {.btn-group role="group" aria-label="third"}
::: {.btn .btn-secondary type="button" data-bs-toggle="offcanvas" data-bs-target="#offcanvas13" aria-controls="offcanvas"}
```{=html}
<i class="bi bi-code-slash" style="color: cornflowerblue"></i>
```
:::
::: {.btn .btn-secondary type="button" data-bs-toggle="offcanvas" data-bs-target="#offcanvas14" aria-controls="offcanvas"}
```{=html}
<i class="bi bi-table" style="color: red;"></i>
```
:::
::::
:::::

# A Street-Level View

::: {.callout-tip collapse="false" title="A Street-Level View"}

## The Most Traveled Stations

You can expand and collapse the following four maps. The original dataset used for these maps into four so that the 'burst' buttons would fit inside the window. Click on the burst buttons to zoom into the sample groups. This is to better understand the logic of where the top most traveled bike stations are located in an effort to better inform future station locations.  

:::: {.d-flex .justify-content-center}
::: {.btn .btn-secondary type="button" data-bs-toggle="offcanvas" data-bs-target="#offcanvas20" aria-controls="offcanvas"}
```{=html}
<i class="bi bi-code-slash" style="font-size: .75em; color: cornflowerblue;"></i>
```
:::
::::

:::::: {#offcanvas20 .offcanvas .offcanvas-start tabindex="-1" aria-labelledby="offcanvas" style="width: auto"}
::::: offcanvas-header
:::: {.h5 .offcanvas-title}
Code for Mapping
::::

:::: {.btn-close type="button" data-bs-dismiss="offcanvas" ariaLabel="Close"}
::::
:::::

::::: offcanvas-body
:::: flex-code

```{r}
#| label: mapData
#| code-summary: "Processing 'flowData' created earlier to include geolocation data for mapview plots."

# All distinct stations in one column
names <- flowData |>
    dplyr::select(from_station,
                  to_station) |>
    tidyr::pivot_longer(cols = 1:2,
                        names_to = NULL,
                        values_to = "station_names") |>
    dplyr::distinct()


# The important geo-coordinates corresponding to station names
mapData <- dplyr::tbl(dbconn,
                      tblPath_fltrd,
                      check_from = FALSE) |>
    dplyr::select(start_station_name,
                  start_lat,
                  start_lng,
                  end_station_name,
                  end_lat,
                  end_lng)

# Filter to include all observations that match the station names listed in 'names'. We need the geo-coordinates alongside the names.
mapData1 <- mapData |>
    dplyr::collect() |>
# Filter through a vector of conditions.
    dplyr::filter(start_station_name %in% names[[1]],
                  end_station_name %in% names[[1]]) |>
    dplyr::select(start_station_name:start_lng)


# Had to split 'mapData' into two and pivot into a single table.
mapData2 <- mapData |>
    dplyr::collect() |>
    dplyr::filter(start_station_name %in% names[[1]],
                  end_station_name %in% names[[1]]) |>
    dplyr::select(end_station_name:end_lng)

# Nice grouping
stations_groupMap <- dplyr::bind_rows(mapData1, mapData2) |>
dplyr::select(start_station_name, start_lat, start_lng) |>
dplyr::rename("station_names" = start_station_name,
"lat" = start_lat,
"lng" = start_lng) |>
dplyr::distinct() |>
dplyr::group_by(station_names)

# Setting seed for sampling
set.seed(113)

# Taking 10 random samples from each station_name group
sampled_stations <- stations_groupMap |>
    dplyr::slice_sample(n = 10) |>
    tidyr::drop_na()
```


```{r}
#| label: mapColors
#| code-summary: "Creates a map coloring palette excluding grays."

# All of the r-colors
allPalette <- colors()

# The grays are vast so we don't want that.
colorfulPal <- purrr::discard(allPalette, stringr::str_detect(allPalette, "gr(a|e)y"))

# When we sample the colors, 10 should be slightly more than needed.
n_colors <- 10
```


```{r}
#| label: mapViewer
#| code-summary: First, sourcing the script needed to generate the maps and creating the list of vectors used as input. These vectors are the slices of the top most traveled stations.

slicerVector <- list(c(1:9), c(10:18), c(19:27), c(28:34))
source("mapViewer.R")
```

```{r}
#| file: "mapViewer.R"
#| eval: false
#| code-summary: "The script used to generate the maps."
#| label: mapViewerScript
```
::::
:::::
::::::

::: {.callout-tip title="Benson Ave & Church St - Ellis Ave & 60th St" collapse="true"}

```{r}
#| label: fig-map1
#| fig-cap: "Benson Ave & Church St - Ellis Ave & 60th St"

set.seed(240)
randomColors <- sample(colorfulPal, n_colors)
mapViewer(slicerVector[[1]])

```

:::

::: {.callout-tip title="Greenview Ave & Fullteron Ave - Loomis Ave & Lexington St" collapse="true"}

```{r}
#| label: fig-map2
#| echo: false
#| fig-cap: "Greenview Ave & Fullteron Ave - Loomis Ave & Lexington St"

set.seed(241)
randomColors <- sample(colorfulPal, n_colors)
mapViewer(slicerVector[[2]])

```

:::

::: {.callout-tip title="Michigan Ave & Oak St - State St & 33rd St" collapse="true"}

```{r}
#| label: fig-map3
#| echo: false
#| fig-cap: "Michigan Ave & Oak St - State St & 33rd St"

set.seed(242)
randomColors <- sample(colorfulPal, n_colors)
mapViewer(slicerVector[[3]])

```

:::

::: {.callout-tip title="Street Dr & Grand Ave - Woodlawn Ave & 55th St" collapse="true"}

```{r}
#| label: fig-map4
#| fig-cap: "Street Dr & Grand Ave - Woodlawn Ave & 55th St"

set.seed(243)
randomColors <- sample(colorfulPal, n_colors)
mapViewer(slicerVector[[4]])
```

:::
::::




## Conclusion



There isn't much of a difference between annual subscriber and casual trip behavior other than trip frequency. Annual subs are people who ride more frequently.  Looking into where the main activity is, you can see that they are near stores, schools, and such. If the goal is to get more people to ride bicycles instead of drive, the answer might lie outside the scope of this analysis. 

```{r}
#| eval: false
#| include: false

# If you need to drop any tables
source("duckDrops.R")
```
